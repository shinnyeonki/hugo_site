<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on My Test Site</title>
    <link>http://localhost:1313/tags/java/</link>
    <description>Recent content in Java on My Test Site</description>
    <generator>Hugo</generator>
    <language>ko-KR</language>
    <lastBuildDate>Tue, 19 Aug 2025 22:14:39 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mac java 관리</title>
      <link>http://localhost:1313/02.inbox/mac-java-%EA%B4%80%EB%A6%AC/</link>
      <pubDate>Mon, 20 May 2024 11:00:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/mac-java-%EA%B4%80%EB%A6%AC/</guid>
      <description>&lt;p&gt;apple 에서 관리되는 방식이므로 brew 패키지 관리자를 통해 하는 방법이 아니다&lt;/p&gt;&#xA;&lt;p&gt;설치된 java 보기&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/libexec/java_home -verbose &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&#xA;&lt;li&gt;모든 JDK는 기본 위치인 &lt;code&gt;/Library/Java/JavaVirtualMachines&lt;/code&gt;에 놔두어집니다. 시스템은 기본적으로 가장 높은 버전을 선택합니다.&lt;/li&gt;&#xA;&lt;li&gt;기본 선택에서 제외하려면 해당 JDK의 &lt;code&gt;Contents/Info.plist&lt;/code&gt; 파일 이름을 &lt;code&gt;Info.plist.disabled&lt;/code&gt;로 변경합니다. 이렇게 하면 &lt;code&gt;$JAVA_HOME&lt;/code&gt;이 해당 JDK를 가리키거나 스크립트나 설정에서 명시적으로 참조할 때 해당 JDK를 여전히 사용할 수 있습니다. 단지 시스템의 &lt;code&gt;java&lt;/code&gt; 명령어에서는 무시됩니다.&lt;/li&gt;&#xA;&lt;li&gt;시스템 런처는 &lt;code&gt;Info.plist&lt;/code&gt; 파일이 있는 JDK 중 가장 높은 버전을 사용합니다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;삭제할 때 여기도 확인&lt;/p&gt;</description>
    </item>
    <item>
      <title>java 쓰레드(thread)</title>
      <link>http://localhost:1313/temp/java-%EC%93%B0%EB%A0%88%EB%93%9Cthread/</link>
      <pubDate>Sun, 18 Feb 2024 19:19:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/java-%EC%93%B0%EB%A0%88%EB%93%9Cthread/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://localhost:1313/memory&#34; class=&#34;internal-file-link&#34;&gt;java 메모리(memory)&lt;/a&gt;).md) 참고&#xA;![Pasted image 2024&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20240218210440.png&#34; alt=&#34; (Image resource not found)&#34; &gt;210440.png)&lt;/p&gt;&#xA;&lt;p&gt;java는 thread의&lt;/p&gt;&#xA;&lt;h2 id=&#34;쓰레드-구현-방법&#34;&gt;쓰레드 구현 방법&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Thread 상속&lt;/li&gt;&#xA;&lt;li&gt;Runnable 인터페이스 구현&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(){ &lt;span style=&#34;color:#75715e&#34;&gt;// Thread 상속 및 익명 클래스로 사용&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;() { 여기에 사용&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Runnable(){ &lt;span style=&#34;color:#75715e&#34;&gt;// Runnable 구현 및 생성자의 인자&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;() { 여기에 사용&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thread 를 상속한 객체는 그 자체로 하나의 쓰레드 객체를 의미하지만&#xA;Runnable 인터페이스를 구현한 객체는 쓰레드로 들어가 일거리라는 의미이다 그러므로 Thread 객체를 new Thread 할 때 생성자에 넣어주어야 한다&lt;/p&gt;</description>
    </item>
    <item>
      <title>servlet</title>
      <link>http://localhost:1313/temp/servlet/</link>
      <pubDate>Wed, 14 Feb 2024 04:16:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/servlet/</guid>
      <description>&lt;p&gt;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20240214041835.png&#34; alt=&#34; (Image resource not found)&#34; &gt;%20image%2020240214041835.png)&#xA;일반적으로 java 진영에서 많이 사용됨&#xA;소켓 연결 http 파싱후 읽기 등 일반적으로 동일한 방식의 http 방식의 처리를 객체화 하여 쉽게 처리하게 해줌&lt;/p&gt;&#xA;&lt;p&gt;사용자 입장에서 비지니스 로직 파트만 실행될 수 있게 한다&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HttpServletRequest 요청된 http 정보를 객체화 오버라딩해서 사용&lt;/li&gt;&#xA;&lt;li&gt;HttpServletResponse 응답용 http 정보를 객체화됨&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>spring life cycle</title>
      <link>http://localhost:1313/temp/spring-life-cycle/</link>
      <pubDate>Thu, 01 Feb 2024 14:18:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/spring-life-cycle/</guid>
      <description>&lt;p&gt;&lt;strong&gt;스프링 빈의 이벤트 라이프사이클&lt;/strong&gt;&#xA;스프링 컨테이너 생성&#xA;-&amp;gt; 스프링 빈 생성&#xA;-&amp;gt; 의존관계 주입&#xA;-&amp;gt; 초기화 콜백&#xA;-&amp;gt; 사용&#xA;-&amp;gt; 소멸전 콜백&#xA;-&amp;gt; 스프링 종료&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;스프링빈 생성시 생성자 의존관계일떄는 같이&#xA;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20240201211107.png&#34; alt=&#34; (Image resource not found)&#34; &gt;&#xA;설정정보(xml, java etc)를 바탕으로 빈을 관리하는 컨테이너를 생성&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;스프링-빈-생성--의존관계-주입&#34;&gt;스프링 빈 생성 &amp;amp; 의존관계 주입&lt;/h2&gt;&#xA;&lt;h3 id=&#34;수동&#34;&gt;수동&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 중복되는 객체생성을 막아준다&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppConfig&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MemberService &lt;span style=&#34;color:#a6e22e&#34;&gt;memberService&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemberServiceImpl(memberRepository());}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; OrderService &lt;span style=&#34;color:#a6e22e&#34;&gt;orderService&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OrderServiceImpl(memberRepository(), discountPolicy()); &lt;span style=&#34;color:#75715e&#34;&gt;//필드 주입을 한다면 필요 없음}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DiscountPolicy &lt;span style=&#34;color:#a6e22e&#34;&gt;discountPolicy&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RateDiscountPolicy();}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MemberRepository &lt;span style=&#34;color:#a6e22e&#34;&gt;memberRepository&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemoryMemberRepository();}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;@Configration 바이트 조작 기술을 통해 중복되는 객체(memberRepository) 생성을 1개만 생성해 공유해 준다&#xA;@Bean 메서드 수준의 어노테이션을 통해 return 되는 값을 객체로 만들어준다&lt;/p&gt;</description>
    </item>
    <item>
      <title>의존관계 주입(dependency injection)</title>
      <link>http://localhost:1313/temp/%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85dependency-injection/</link>
      <pubDate>Wed, 31 Jan 2024 20:25:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85dependency-injection/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;생성자 주입&lt;/li&gt;&#xA;&lt;li&gt;설정자 수정자 주입(setter)&lt;/li&gt;&#xA;&lt;li&gt;필드 주입&lt;/li&gt;&#xA;&lt;li&gt;일반 메서드 주입&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;생성자-주입&#34;&gt;생성자 주입&lt;/h2&gt;&#xA;&lt;p&gt;생성자 주입(Constructor Injection) 이 방법 객체 생성 시점 의존성 부여&#xA;불변,필수&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleClass&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SomeDependency dependency;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleClass&lt;/span&gt;(SomeDependency dependency) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dependency&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dependency;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;spring 에서는 @Autowired 를 통해 의존성을 주입하는데&#xA;생성자가 1개 라면 생략 가능하다&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;설정자-주입&#34;&gt;설정자 주입&lt;/h2&gt;&#xA;&lt;p&gt;설정자 주입(Setter Injection) 이 방법은 객체 생성 이후에도 의존성 변경 가능&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleClass&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SomeDependency dependency;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setDependency&lt;/span&gt;(SomeDependency dependency) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dependency&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dependency;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;필드-주입&#34;&gt;필드 주입&lt;/h2&gt;&#xA;&lt;p&gt;필드 주입(Field Injection)&lt;/p&gt;</description>
    </item>
    <item>
      <title>java 메모리(memory)</title>
      <link>http://localhost:1313/02.inbox/java-%EB%A9%94%EB%AA%A8%EB%A6%ACmemory/</link>
      <pubDate>Mon, 29 Jan 2024 05:38:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/java-%EB%A9%94%EB%AA%A8%EB%A6%ACmemory/</guid>
      <description>&lt;p&gt;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20240127113149-1.jpeg&#34; alt=&#34;Pasted image 20240127113149-1 (Image resource not found)&#34; &gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>java 제네릭(generic)</title>
      <link>http://localhost:1313/02.inbox/java-%EC%A0%9C%EB%84%A4%EB%A6%ADgeneric/</link>
      <pubDate>Mon, 29 Jan 2024 05:00:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/java-%EC%A0%9C%EB%84%A4%EB%A6%ADgeneric/</guid>
      <description>&lt;p&gt;java 는 제네릭 배열을 생성하지 못한다&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cla9.tistory.com/44&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;java generic 원리&lt;/a&gt; 중요!!!&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Integer &amp;lt;: Number&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Double &amp;lt;: Number&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ArrayList&amp;lt;E&amp;gt; &amp;lt;:  List&amp;lt;E&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Collection&amp;lt;E&amp;gt; &amp;lt;:  Iterable&amp;lt;E&amp;gt;&lt;/code&gt;&#xA;Super type : Number 는 Integer  에 대해 Super type 이다&#xA;Sub type : Integer 는 Number 에 대해 Sub type 이다&#xA;variant 공변 : Number 와 Integer 는 공변한다&#xA;Invariant 불공변 : Integer 와 String 는 공변하지 않는다&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; Java에서는 해당 경우에 Substitution Principle을 적용하지 않습니다&lt;/p&gt;</description>
    </item>
    <item>
      <title>java 리플렉션(reflection)</title>
      <link>http://localhost:1313/02.inbox/java-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98reflection/</link>
      <pubDate>Sat, 27 Jan 2024 11:29:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/java-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98reflection/</guid>
      <description>&lt;p&gt;클래스 인터페이스의 메타 정보를 java.lang.Class 클래스 객체에서 관리한다&#xA;이를 통해 런타임 시점에 클래스의 정보를 확인할 수 있다&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Class &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;클래스&lt;/span&gt; 이름.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 클래스 이름을 통해 얻는다&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Class &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Class&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;forName&lt;/span&gt;(클래스 이름); &lt;span style=&#34;color:#75715e&#34;&gt;// 클래스 이름을 통해 얻는다&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Class &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;객체&lt;/span&gt; 참조 변수.&lt;span style=&#34;color:#a6e22e&#34;&gt;getClass&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// 객체의 이름을 통해 얻는다&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 얻어진 객체로 부터 여러가지 정보를 확인할 수 있다&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;메서드&lt;/th&gt;&#xA;          &lt;th&gt;info&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Package getPackage()&lt;/td&gt;&#xA;          &lt;td&gt;패키지 정보 읽기&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;String getSimpleName()&lt;/td&gt;&#xA;          &lt;td&gt;패키지를 제외한 타입 이름&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;String getName()&lt;/td&gt;&#xA;          &lt;td&gt;패키지를 포함한 전체 타입 이름&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Constuctor[] getDeclaredConstructors()&lt;/td&gt;&#xA;          &lt;td&gt;생성자 정보 읽기&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Method[] getDeclaredMethod()&lt;/td&gt;&#xA;          &lt;td&gt;메서드 정보 읽기&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Field[] getDeclaredField()&lt;/td&gt;&#xA;          &lt;td&gt;필드 정보 읽기&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;등등 많은 것들 을 얻을 수 있다&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cla9.tistory.com/52&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;제네릭은 런타임에는 타입을 알지 못한다&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>싱글톤 패턴의 문제</title>
      <link>http://localhost:1313/02.inbox/%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C/</link>
      <pubDate>Fri, 26 Jan 2024 05:15:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C/</guid>
      <description>&lt;p&gt;클래스의 생성자를 통해 만들어지는 인스턴스의 개수를 1개로 고정시키는 디자인 패턴이다&#xA;하지만 이는 몇가지 문제를 만들어낸다&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/%7c%ec%8b%b1%ea%b8%80%ed%86%a4%20%ed%8c%a8%ed%84%b4%ec%9d%98%20%eb%ac%b8%ec%a0%9c#%ec%bd%94%eb%93%9c%ec%96%91%20%ec%a6%9d%ea%b0%80&#34; class=&#34;internal-file-link&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;의존성 문제&lt;/li&gt;&#xA;&lt;li&gt;OCP 원칙 위반&lt;/li&gt;&#xA;&lt;li&gt;테스트 어려움&lt;/li&gt;&#xA;&lt;li&gt;내부 속성 변경 어려움&lt;/li&gt;&#xA;&lt;li&gt;자식 클래스 생성 어려움&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;코드-양-증가&#34;&gt;코드 양 증가&lt;/h2&gt;&#xA;&lt;p&gt;싱글톤 패턴을 구현하려면 클래스 내에 싱글톤 인스턴스를 생성하고 관리하는 코드가 추가됩니다. 이로 인해 코드가 더 복잡해지고, 가독성이 떨어질 수 있습니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SingletonImpl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Singleton{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; SingletonImpl instance;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SingletonImpl&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// private 생성자&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; SingletonImpl &lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (instance &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SingletonImpl();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;의존성-문제&#34;&gt;의존성 문제&lt;/h2&gt;&#xA;&lt;p&gt;클라이언트는 Singleton 클래스에 직접 의존하게 되므로, 의존성 역전 원칙(Dependency Inversion Principle, DIP)을 위반합니다. 즉, 클라이언트는 구체 클래스에 종속되어 유연성이 감소합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>java 컬렉션(Collections Framework)</title>
      <link>http://localhost:1313/02.inbox/java-%EC%BB%AC%EB%A0%89%EC%85%98collections-framework/</link>
      <pubDate>Mon, 22 Jan 2024 18:17:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/java-%EC%BB%AC%EB%A0%89%EC%85%98collections-framework/</guid>
      <description>&lt;p&gt;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20240122181734.jpeg&#34; alt=&#34;Pasted image 20240122181734 (Image resource not found)&#34; &gt;&#xA;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20240206060503.svg&#34; alt=&#34;Pasted image 20240206060503 (Image resource not found)&#34; &gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;리스트 : 배열의 확장&lt;/li&gt;&#xA;&lt;li&gt;배열리스트 : 크기를 내부에서 자동으로 정해주는 배열 (vector)&lt;/li&gt;&#xA;&lt;li&gt;링크드리스트 : 인접한 위치에 저장되지 않고 포인터를 사용하여 연결되는 선형 데이터 구조&lt;/li&gt;&#xA;&lt;li&gt;큐 : 선입선출&lt;/li&gt;&#xA;&lt;li&gt;set : 집합 중복 불가&lt;/li&gt;&#xA;&lt;li&gt;map = dictionary : key value 한쌍 구조&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>java cli compile</title>
      <link>http://localhost:1313/temp/java-cli-compile/</link>
      <pubDate>Wed, 10 Jan 2024 00:09:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/java-cli-compile/</guid>
      <description></description>
    </item>
    <item>
      <title>java 어노테이션(anotation)</title>
      <link>http://localhost:1313/02.inbox/java-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98anotation/</link>
      <pubDate>Fri, 05 Jan 2024 21:01:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/java-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98anotation/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;어노테이션 적용대상  @Target 클래스 필드 메서드 또다른 어노테이션&lt;/li&gt;&#xA;&lt;li&gt;어노테이션 유지정책&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SOURCE=컴파일까지 컴파일 시점에 적용&lt;/li&gt;&#xA;&lt;li&gt;CLASS=메모리 로딩때 까지 이후 제거&lt;/li&gt;&#xA;&lt;li&gt;RUNTIME=계속 유지&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
