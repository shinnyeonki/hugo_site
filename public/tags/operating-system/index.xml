<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operating-System on My Test Site</title>
    <link>http://localhost:1313/tags/operating-system/</link>
    <description>Recent content in Operating-System on My Test Site</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 01 Oct 2025 19:15:19 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/operating-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>프로그램 메모리 구조 파악하기</title>
      <link>http://localhost:1313/%EC%8B%A4%EC%8A%B5%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B5%AC%EC%A1%B0/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 01 Oct 2025 19:15:19 +0900</pubDate>
      <guid>http://localhost:1313/%EC%8B%A4%EC%8A%B5%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B5%AC%EC%A1%B0/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0-%ED%8C%8C%EC%95%85%ED%95%98%EA%B8%B0/</guid>
      <description>&lt;p&gt;프로그램의 실행파일로 프로세스를 생성해 프로그램을 돌리는 과정에서 각 과정에서 메모리 구조를 확인할 수 있다&lt;/p&gt;&#xA;&lt;h2 id=&#34;실행파일&#34;&gt;실행파일&lt;/h2&gt;&#xA;&lt;p&gt;먼저 실행파일이다 실행 파일은 운영체제별 포메멧 별로 다르게 사용되는데 이때 code section 과 data section 은 동일하다 이를 확인하기 위한 방법이 size 명령어이다&#xA;하지만  실행 파일의 헤더 및 기타 섹션을 확인하기 위한 방법은 운영 체제와 해당 실행 파일의 포맷(예: ELF, PE, Mach-O 등)에 따라 달라진다 리눅스, 유닉스 계열 시스템에서는 주로 ELF(Executable and Linkable Format) 포맷이 사용되며, Windows에서는 PE(Portable Executable) 포맷, macOS에서는 Mach-O 포맷이 사용된다&lt;/p&gt;</description>
    </item>
    <item>
      <title>드라이버는 커널인가</title>
      <link>http://localhost:1313/02.inbox/%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84%EB%8A%94-%EC%BB%A4%EB%84%90%EC%9D%B8%EA%B0%80/</link>
      <pubDate>Mon, 11 Aug 2025 03:00:33 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84%EB%8A%94-%EC%BB%A4%EB%84%90%EC%9D%B8%EA%B0%80/</guid>
      <description>&lt;p&gt;&amp;ldquo;&lt;strong&gt;모든 드라이버는 커널의 일부로 간주되는가?&lt;/strong&gt;&amp;rdquo;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;✅ &lt;strong&gt;하드웨어 제어를 직접 하는 전통적인 장치 드라이버는 &amp;lsquo;커널의 일부&amp;rsquo;로 간주됩니다.&lt;/strong&gt;&lt;br&gt;&#xA;❌ 하지만 &lt;strong&gt;모든 드라이버가 커널 코드 트리에 포함되거나, 커널 공간에서만 동작하는 것은 아닙니다.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;1-전통적인-장치-드라이버--커널의-일부-예-네트워크-카드-usb-디스크-tty-드라이버-등&#34;&gt;1. 전통적인 장치 드라이버 → 커널의 일부 (예: 네트워크 카드, USB, 디스크, TTY 드라이버 등)&lt;/h3&gt;&#xA;&lt;p&gt;이들은 다음 조건을 충족하므로 &lt;strong&gt;커널의 일부&lt;/strong&gt;로 간주됩니다:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;커널 공간&lt;/strong&gt;(kernel space)에서 실행됨&lt;/li&gt;&#xA;&lt;li&gt;하드웨어 레지스터, 인터럽트, DMA 등에 접근&lt;/li&gt;&#xA;&lt;li&gt;시스템 콜이나 VFS(가상 파일 시스템)와 통합됨&lt;/li&gt;&#xA;&lt;li&gt;커널의 메모리 관리, 스케줄러와 상호작용&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;예시&#34;&gt;예시:&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 커널 소스 트리에서 볼 수 있는 드라이버 코드 예&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;drivers&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usb&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;core&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;hub.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drivers&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tty&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pty.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drivers&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;net&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ethernet&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;intel&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;e1000&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;e1000_main.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;→ 이 코드들은 리눅스 커널 소스 트리(&lt;code&gt;https://git.kernel.org&lt;/code&gt;)에 포함되어 있고,&lt;br&gt;&#xA;컴파일 시 &lt;strong&gt;커널의 일부&lt;/strong&gt;가 되거나, &lt;strong&gt;로드 가능한 모듈&lt;/strong&gt;로 분리됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2의 보수를 음수 표현법으로 정한 이유</title>
      <link>http://localhost:1313/02.inbox/2%EC%9D%98-%EB%B3%B4%EC%88%98%EB%A5%BC-%EC%9D%8C%EC%88%98-%ED%91%9C%ED%98%84%EB%B2%95%EC%9C%BC%EB%A1%9C-%EC%A0%95%ED%95%9C-%EC%9D%B4%EC%9C%A0/</link>
      <pubDate>Fri, 27 Jun 2025 19:56:01 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/2%EC%9D%98-%EB%B3%B4%EC%88%98%EB%A5%BC-%EC%9D%8C%EC%88%98-%ED%91%9C%ED%98%84%EB%B2%95%EC%9C%BC%EB%A1%9C-%EC%A0%95%ED%95%9C-%EC%9D%B4%EC%9C%A0/</guid>
      <description>&lt;p&gt;첫자리 a0 부터 a3 이라고 가정&#xA;맨 앞자리를 음수를 나타내는 비트라고 정하는 방법과&#xA;2의 보수를 음수를 나타내는 비트라고 정하는 방법 2가지를 비교&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;이진수&lt;/th&gt;&#xA;          &lt;th&gt;초기 구현&lt;/th&gt;&#xA;          &lt;th&gt;2의 보수로 구현한 음수&lt;/th&gt;&#xA;          &lt;th&gt;더하기 식&lt;/th&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;0000&lt;/td&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;0*a3 + 0*a2 + 0*a1 + 0*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;0001&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;1*a3 + 0*a2 + 0*a1 + 1*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;0010&lt;/td&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;0*a3 + 0*a2 + 1*a1 + 0*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;0011&lt;/td&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;0*a3 + 0*a2 + 1*a1 + 1*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;0100&lt;/td&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;0*a3 + 1*a2 + 0*a1 + 0*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;0101&lt;/td&gt;&#xA;          &lt;td&gt;5&lt;/td&gt;&#xA;          &lt;td&gt;5&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;0*a3 + 1*a2 + 0*a1 + 1*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;0110&lt;/td&gt;&#xA;          &lt;td&gt;6&lt;/td&gt;&#xA;          &lt;td&gt;6&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;0*a3 + 1*a2 + 1*a1 + 0*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;0111&lt;/td&gt;&#xA;          &lt;td&gt;7&lt;/td&gt;&#xA;          &lt;td&gt;7&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;0*a3 + 1*a2 + 1*a1 + 1*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1000&lt;/td&gt;&#xA;          &lt;td&gt;-0&lt;/td&gt;&#xA;          &lt;td&gt;-8&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;-1*a3 + 0*a2 + 0*a1 + 0*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1001&lt;/td&gt;&#xA;          &lt;td&gt;-1&lt;/td&gt;&#xA;          &lt;td&gt;-7&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;-1*a3 + 0*a2 + 0*a1 + 1*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1010&lt;/td&gt;&#xA;          &lt;td&gt;-2&lt;/td&gt;&#xA;          &lt;td&gt;-6&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;-1*a3 + 0*a2 + 1*a1 + 0*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1011&lt;/td&gt;&#xA;          &lt;td&gt;-3&lt;/td&gt;&#xA;          &lt;td&gt;-5&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;-1*a3 + 0*a2 + 1*a1 + 1*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1100&lt;/td&gt;&#xA;          &lt;td&gt;-4&lt;/td&gt;&#xA;          &lt;td&gt;-4&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;-1*a3 + 1*a2 + 0*a1 + 0*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1101&lt;/td&gt;&#xA;          &lt;td&gt;-5&lt;/td&gt;&#xA;          &lt;td&gt;-3&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;-1*a3 + 1*a2 + 0*a1 + 1*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1110&lt;/td&gt;&#xA;          &lt;td&gt;-6&lt;/td&gt;&#xA;          &lt;td&gt;-2&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;-1*a3 + 1*a2 + 1*a1 + 0*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1111&lt;/td&gt;&#xA;          &lt;td&gt;-7&lt;/td&gt;&#xA;          &lt;td&gt;-1&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;-1*a3 + 1*a2 + 1*a1 + 1*a0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;이진수 덧셈 방식에 따를 때 (회로의 구현방식중 ) 2의 보수가 가장 적절한 음수 표현 방법이다&lt;/p&gt;</description>
    </item>
    <item>
      <title>university operating system</title>
      <link>http://localhost:1313/06.university/os/university-operating-system/</link>
      <pubDate>Thu, 05 Jun 2025 17:41:23 +0900</pubDate>
      <guid>http://localhost:1313/06.university/os/university-operating-system/</guid>
      <description>&lt;h2 id=&#34;computer-organization&#34;&gt;Computer Organization&lt;/h2&gt;&#xA;&lt;h3 id=&#34;폰-노이만-구조&#34;&gt;폰 노이만 구조&lt;/h3&gt;&#xA;&lt;p&gt;폰 노이만 구조가 이전과 다른점 : 코드영역(program)이 하드웨어가 아닌 메모리로 올라간다(소프트웨어 개념의 탄생)&lt;/p&gt;&#xA;&lt;h2 id=&#34;메모리-계층-구조&#34;&gt;메모리 계층 구조&lt;/h2&gt;&#xA;&lt;p&gt;위 내용은 컴퓨터 시스템에서 **메모리 계층 구조(Memory Hierarchy)**와 관련된 개념을 설명하고 있습니다. 특히, 프로세서가 메모리를 참조할 때 나타나는 **시간적/공간적 지역성(Temporal and Spatial Locality)**과 이를 기반으로 한 메모리 접근 패턴의 효율성을 다룹니다. 아래에서 각 항목을 상세히 설명하겠습니다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-memory-references-cluster-in-time-and-space&#34;&gt;1. &lt;strong&gt;Memory References Cluster in Time and Space&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;이 문장은 메모리 참조가 **시간적 지역성(Temporal Locality)**과 **공간적 지역성(Spatial Locality)**이라는 두 가지 특성을 보인다는 것을 의미합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;1-시간적-지역성-temporal-locality&#34;&gt;(1) 시간적 지역성 (Temporal Locality)&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;정의&lt;/strong&gt;: 최근에 참조된 데이터가 다시 참조될 가능성이 높음.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: 프로그램이 특정 변수를 반복적으로 사용하는 경우, 해당 변수는 캐시 또는 레지스터에 남아 있는 것이 유리함.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;응용&lt;/strong&gt;: 캐시 메모리를 통해 자주 사용되는 데이터를 유지하여 성능을 향상시킴.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;2-공간적-지역성-spatial-locality&#34;&gt;(2) 공간적 지역성 (Spatial Locality)&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;정의&lt;/strong&gt;: 어떤 메모리 주소가 참조되면 그 근처의 주소들도 곧 참조될 가능성이 높음.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: 배열이나 연속된 데이터 구조를 처리할 때, 프로세서는 연속된 메모리 위치를 순차적으로 접근함.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;응용&lt;/strong&gt;: 캐시 라인(Cache Line)을 통해 한 번에 여러 데이터를 미리 가져오는 방식으로 활용됨.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-data-is-organized-so-that-the-percentage-of-accesses-to-each-successively-lower-level-is-substantially-less-than-that-of-the-level-above&#34;&gt;2. &lt;strong&gt;Data is Organized So That the Percentage of Accesses to Each Successively Lower Level is Substantially Less Than That of the Level Above&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;이 문장은 &lt;strong&gt;메모리 계층 구조&lt;/strong&gt;의 기본 원칙을 설명합니다. 메모리 계층 구조는 다음과 같은 특징을 가집니다:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;1-메모리-계층-구조&#34;&gt;(1) 메모리 계층 구조&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;컴퓨터 시스템은 다양한 종류의 메모리를 사용하며, 각 메모리는 &lt;strong&gt;속도&lt;/strong&gt;, &lt;strong&gt;크기&lt;/strong&gt;, &lt;strong&gt;비용&lt;/strong&gt;의 관점에서 차이가 있음.&lt;/li&gt;&#xA;&lt;li&gt;일반적으로 메모리 계층은 다음과 같이 구성됩니다:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;레지스터(Register)&lt;/strong&gt;: 가장 빠르지만 크기가 작음.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;캐시(Cache)&lt;/strong&gt;: L1, L2, L3 캐시로 나뉘며, 속도와 크기가 점진적으로 증가.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;RAM(Main Memory)&lt;/strong&gt;: 큰 용량을 제공하지만 상대적으로 느림.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;디스크(Storage)&lt;/strong&gt;: 가장 느리지만 매우 큰 용량을 제공.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;2-접근-비율access-rate&#34;&gt;(2) 접근 비율(Access Rate)&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;메모리 계층 구조에서는 더 낮은 수준의 메모리로 갈수록 접근 비율이 급격히 감소합니다.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;예를 들어, 프로세서가 필요로 하는 데이터의 대부분은 &lt;strong&gt;L1 캐시&lt;/strong&gt;에서 해결되며, L2 캐시로 넘어가는 비율은 그보다 적고, RAM으로 넘어가는 비율은 더욱 줄어듦.&lt;/li&gt;&#xA;&lt;li&gt;이러한 접근 비율의 차이는 &lt;strong&gt;지역성 원칙&lt;/strong&gt; 덕분에 가능해짐.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;3-효율성&#34;&gt;(3) 효율성&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;메모리 계층 구조는 &lt;strong&gt;빠른 메모리&lt;/strong&gt;를 적절히 활용하여 전체 시스템의 성능을 극대화합니다.&lt;/li&gt;&#xA;&lt;li&gt;예를 들어, L1 캐시가 필요한 데이터를 제공할 확률이 90%이고, L2 캐시가 추가로 8%를 처리한다면, RAM에서 직접 데이터를 읽어야 하는 경우는 2%에 불과하게 됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-can-be-applied-across-more-than-two-levels-of-memory&#34;&gt;3. &lt;strong&gt;Can Be Applied Across More Than Two Levels of Memory&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;메모리 계층 구조는 단순히 두 개의 메모리 레벨(예: 캐시와 RAM)에만 적용되는 것이 아니라, &lt;strong&gt;여러 레벨&lt;/strong&gt;에 걸쳐 적용될 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;1-다중-메모리-레벨&#34;&gt;(1) 다중 메모리 레벨&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;현대 컴퓨터 시스템에서는 여러 레벨의 메모리가 존재하며, 각 레벨은 서로 다른 특성을 가짐:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;L1 캐시&lt;/strong&gt;: 가장 빠르지만 작은 용량.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;L2 캐시&lt;/strong&gt;: L1보다 느리지만 더 큰 용량.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;L3 캐시&lt;/strong&gt;: L2보다 더 느리지만 더 큰 용량.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;RAM&lt;/strong&gt;: 캐시보다 느리지만 매우 큰 용량.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;SSD/HDD&lt;/strong&gt;: 가장 느리지만 영구 저장이 가능.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;2-데이터-이동&#34;&gt;(2) 데이터 이동&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;데이터는 필요한 경우에 따라 위계적으로 이동합니다. 예를 들어:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;프로세서가 데이터를 요청하면 먼저 L1 캐시를 확인.&lt;/li&gt;&#xA;&lt;li&gt;L1 캐시에 없으면 L2 캐시를 확인.&lt;/li&gt;&#xA;&lt;li&gt;L2 캐시에도 없으면 L3 캐시, RAM, 디스크 순으로 검색.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;3-성능-최적화&#34;&gt;(3) 성능 최적화&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;각 메모리 레벨의 용량과 속도를 적절히 조합하여 전체 시스템의 성능을 최적화합니다.&lt;/li&gt;&#xA;&lt;li&gt;예를 들어, 캐시 미스(Cache Miss)가 발생할 때마다 더 느린 메모리로 접근해야 하므로, 캐시 히트율(Cache Hit Rate)을 높이는 것이 중요합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;요약-및-결론&#34;&gt;요약 및 결론&lt;/h3&gt;&#xA;&lt;p&gt;위 내용은 메모리 계층 구조와 지역성 원칙을 중심으로, 프로세서가 메모리를 참조할 때 나타나는 패턴과 이를 활용한 시스템 설계 원리를 설명합니다. 핵심 포인트는 다음과 같습니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>university operating system quiz</title>
      <link>http://localhost:1313/06.university/os/university-operating-system-quiz/</link>
      <pubDate>Tue, 03 Jun 2025 06:40:43 +0900</pubDate>
      <guid>http://localhost:1313/06.university/os/university-operating-system-quiz/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;pcb(process control block) 에 포함된 정보&#xA;&lt;ul&gt;&#xA;&lt;li&gt;process state&lt;/li&gt;&#xA;&lt;li&gt;process number&lt;/li&gt;&#xA;&lt;li&gt;program counter and registers&lt;/li&gt;&#xA;&lt;li&gt;memory limits&lt;/li&gt;&#xA;&lt;li&gt;list of open files&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;6주차&#34;&gt;6주차&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU를 연속적으로 사용하는 시간을 CPU burst 라고 한다&lt;/li&gt;&#xA;&lt;li&gt;스케줄링 알고리즘의 목적으로 바람직한것&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cpu 사용율을 최대화&lt;/li&gt;&#xA;&lt;li&gt;throughput 을 최대화&lt;/li&gt;&#xA;&lt;li&gt;average wating time 최대화&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;스케줄링에 대해 맞는것&#xA;&lt;ul&gt;&#xA;&lt;li&gt;preemtive 는 강제 중단 가능 non-preemtive 는 강제 중단 불가능&lt;/li&gt;&#xA;&lt;li&gt;최근 운영체제는 preemtive 를 주로 사용&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;non-preemtive 알고리즘&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SJF&lt;/li&gt;&#xA;&lt;li&gt;FCFS&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;non-preemtive 에서 가장 average wating time 이 가장 작은 것은 shortest job first&lt;/li&gt;&#xA;&lt;li&gt;exponential moving average&#xA;&lt;ul&gt;&#xA;&lt;li&gt;과거의 데이터가 현재의 값에 영향을 미치고 최근 데이터가 더 영향이 더 큰 경우에 사용한다&lt;/li&gt;&#xA;&lt;li&gt;값의 변화의 추이를 예측하는 데 사용된다&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;preemtive 스케줄링&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SRTF&lt;/li&gt;&#xA;&lt;li&gt;Priorty&lt;/li&gt;&#xA;&lt;li&gt;Round Robin&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;priorty 스케줄링의 단점 =&amp;gt; starvation, 기아&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;7주차&#34;&gt;7주차&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;멀티레벨 queue 스케줄링에서는 각 큐가 일정비율로 CPU 를 할당받는다 =&amp;gt; True&lt;/li&gt;&#xA;&lt;li&gt;process aging 을 구현할 수 있는 스케줄링 방법 =&amp;gt; multilevel feedback queue 스케줄링&lt;/li&gt;&#xA;&lt;li&gt;윈도우는 preemptive scheduling 을 사용&lt;/li&gt;&#xA;&lt;li&gt;동시성 문제에 대해 맞는것&#xA;&lt;ul&gt;&#xA;&lt;li&gt;두개이상의 프로세스가 같은 리소스를 동시에 접근하려 할 때 발생&lt;/li&gt;&#xA;&lt;li&gt;CPU 코어가 하나인 경우에도 발생한다&lt;/li&gt;&#xA;&lt;li&gt;race condition 때문에 발생하기도 한다&lt;/li&gt;&#xA;&lt;li&gt;critical section problem 으로 이해 할 수 있다&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;동시성 문제는 프로세스가 같은 변수를 동시에 읽으려고 할 때도 발생한다 =&amp;gt; False&lt;/li&gt;&#xA;&lt;li&gt;critical section 은 하나의 프로세스만 들어갈 수 있다는 조건은 mutual exclution&lt;/li&gt;&#xA;&lt;li&gt;critical section에 아무도 없는데 계속 대기하는 상황은 Progress&lt;/li&gt;&#xA;&lt;li&gt;critical section 문제를 해결하고자 할때 Mutual exclution 을 만족하지 못하는 이유&#xA;&lt;ul&gt;&#xA;&lt;li&gt;locked = 0 or 1 lock 방식 알고리즘의 경우 여러 프로세스가 동시에 critical section에 들어 갈 수 있기 때문&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;9주차&#34;&gt;9주차&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;lock 방식은 mutual exclusion, bounded Waiting 만족하지 못한다&lt;/li&gt;&#xA;&lt;li&gt;peterson solution의 한계는 critical section problem 이 이미 해결되었다고 가정한 후에 풀었다&lt;/li&gt;&#xA;&lt;li&gt;critical section problem 를 해결하기 위해 interrupt 를 비활성화 하는 방법의 한계는 cpu 가 여러개인 경우 적용할 수 없고 결국 시스템의 성능이 저하된다&lt;/li&gt;&#xA;&lt;li&gt;semaphore 접근을 위해 들어갈때 wait, 나갈 때 signal 을 부른다&lt;/li&gt;&#xA;&lt;li&gt;semaphore 가 critical section 에 들어가기 위해 지속적으로 semaphore 의 현재값을 체크 할 수 있다 이것을 busy-wating(spin lock) 이라고 한다&lt;/li&gt;&#xA;&lt;li&gt;semaphore 의 값이 -2 일 때 대기자 리스트에 2개의 프로세스가 대기중이다&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;중간고사&#34;&gt;중간고사&lt;/h3&gt;&#xA;&lt;p&gt;폰 노이만 구조가 이전과 다른점 : 코드영역(program)이 하드웨어가 아닌 메모리로 올라간다(소프트웨어 개념의 탄생)&lt;br&gt;&#xA;캐쉬를 통해 성능 향상이 가능한 이유 : priciple of locality : 비슷한 시간에 지역적으로 접근한다&lt;/p&gt;</description>
    </item>
    <item>
      <title>프로세스 생성</title>
      <link>http://localhost:1313/%EC%8B%A4%EC%8A%B5%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B5%AC%EC%A1%B0/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%9D%EC%84%B1/</link>
      <pubDate>Tue, 03 Jun 2025 06:11:53 +0900</pubDate>
      <guid>http://localhost:1313/%EC%8B%A4%EC%8A%B5%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B5%AC%EC%A1%B0/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%9D%EC%84%B1/</guid>
      <description>&lt;p&gt;프로세스는 두가지 목적으로 생성한다&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fork() : 다중 프로세스 프로그램 사용 =&amp;gt; 현재 프로세스의 메모리 복사 다른 프로세스로 등록&lt;/li&gt;&#xA;&lt;li&gt;execve() : 다른 프로그램 실행용( bash 에서 실행할 때 ) =&amp;gt; 현재 프로세스의 메모리를 새로운 프로세스의 메모리로 덮어 쓴다&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;프로세스가 운영체제에게 부여받은 메모리 구조&#xA;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20240304174149.png&#34; alt=&#34; (Image resource not found)&#34; &gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;실행파일&#34;&gt;실행파일&lt;/h2&gt;&#xA;&lt;p&gt;실행파일은 리눅스에서는 ELF (excutable linkable format) 형식이며&#xA;readelf -h {실행파일 명}&#xA;readelf -S {실행파일 명}&#xA;으로 사용 가능하다&lt;/p&gt;</description>
    </item>
    <item>
      <title>주소 바인딩 실습(소스코드 부터 프로세스까지)</title>
      <link>http://localhost:1313/02.inbox/%EC%A3%BC%EC%86%8C-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%8B%A4%EC%8A%B5%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EB%B6%80%ED%84%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B9%8C%EC%A7%80/</link>
      <pubDate>Tue, 03 Jun 2025 05:44:08 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/%EC%A3%BC%EC%86%8C-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%8B%A4%EC%8A%B5%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EB%B6%80%ED%84%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B9%8C%EC%A7%80/</guid>
      <description>&lt;h2 id=&#34;주소-바인딩address-binding-과정-심층-분석&#34;&gt;주소 바인딩(Address Binding) 과정 심층 분석&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-주소-바인딩의-개념과-목적&#34;&gt;1. 주소 바인딩의 개념과 목적&lt;/h3&gt;&#xA;&lt;p&gt;**주소 바인딩(Address Binding)**이란 프로그램의 소스 코드에 사용된 변수나 함수 같은 심볼릭 주소(Symbolic Address)가 실제 물리 메모리(Physical Memory)의 주소로 변환되는 전체 과정을 의미합니다. 이 과정은 컴퓨터가 프로그램을 실행하기 위한 핵심적인 메커니즘입니다.&lt;/p&gt;&#xA;&lt;h4 id=&#34;목적&#34;&gt;목적&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;재배치(Relocation)&lt;/strong&gt;: 프로그램을 메모리의 어느 위치에든 적재하여 실행할 수 있도록 합니다. 만약 주소가 고정되어 있다면 여러 프로그램을 동시에 실행하기 어렵습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;메모리 보호(Memory Protection)&lt;/strong&gt;: 각 프로세스가 자신에게 할당된 메모리 영역만 접근하도록 격리하여 시스템의 안정성을 높입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;메모리 효율성 증대&lt;/strong&gt;: 가상 메모리(Virtual Memory), 공유 라이브러리(Shared Library) 등의 기법을 통해 한정된 물리 메모리를 여러 프로세스가 효율적으로 나누어 사용할 수 있게 합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;본 문서는 리눅스 CLI 환경에서 제공하는 다양한 도구를 활용하여, &lt;strong&gt;컴파일 → 링크 → 적재 → 실행&lt;/strong&gt; 각 단계에서 주소 바인딩이 어떻게 이루어지는지 구체적인 명령과 출력을 통해 심층적으로 추적하고 분석하는 것을 목표로 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>IPC (massage passing)</title>
      <link>http://localhost:1313/02.inbox/ipc-massage-passing/</link>
      <pubDate>Thu, 01 May 2025 13:03:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/ipc-massage-passing/</guid>
      <description>&lt;p&gt;아래는 &lt;strong&gt;Unix에서 사용되는 다양한 프로세스 간 통신&lt;/strong&gt;(Inter-Process Communication, IPC) 방식들에 대한 &lt;strong&gt;자세한 설명&lt;/strong&gt;입니다.&lt;br&gt;&#xA;주요 내용은 다음과 같은 IPC 기법들을 포함합니다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ordinary Pipe (일반 파이프)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Named Pipe (FIFO)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;UNIX Domain Socket&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-1-ordinary-pipe-일반-파이프&#34;&gt;🔹 1. Ordinary Pipe (일반 파이프)&lt;/h3&gt;&#xA;&lt;h4 id=&#34;-개념&#34;&gt;✅ 개념&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;pipe()&lt;/code&gt; 시스템 콜을 통해 생성됨&lt;/li&gt;&#xA;&lt;li&gt;두 개의 &lt;strong&gt;파일 디스크립터&lt;/strong&gt;(file descriptor) 반환:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;하나는 &lt;strong&gt;쓰기 전용&lt;/strong&gt;(write-end)&lt;/li&gt;&#xA;&lt;li&gt;하나는 &lt;strong&gt;읽기 전용&lt;/strong&gt;(read-end)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;데이터는 쓰기 쪽으로 넣고, 읽기 쪽에서 뺌 → &lt;strong&gt;Producer-Consumer 패턴&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;단방향(unidirectional) 통신만 지원&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-특징&#34;&gt;✅ 특징&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;항목&lt;/th&gt;&#xA;          &lt;th&gt;내용&lt;/th&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;범위&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;부모와 자식 프로세스 간만 가능 (fork 이후 공유)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;존속성&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;프로세스 종료 시 사라짐&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;방향성&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;단방향 (한쪽에서만 보내고 한쪽에서만 받음)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;사용 예시&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;쉘 명령어 연결 (&lt;code&gt;ls | grep &amp;quot;txt&amp;quot;&lt;/code&gt;)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;-예제-코드&#34;&gt;✅ 예제 코드&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pid_t&lt;/span&gt; pid;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(pipefd) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pipe failed&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(EXIT_FAILURE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// Fork 실패&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fork failed&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(EXIT_FAILURE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// 자식 프로세스 (reader)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]); &lt;span style=&#34;color:#75715e&#34;&gt;// 쓰기 fd 닫기&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(STDOUT_FILENO, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 부모 프로세스 (writer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]); &lt;span style=&#34;color:#75715e&#34;&gt;// 읽기 fd 닫기&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from parent&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;wait&lt;/span&gt;(NULL); &lt;span style=&#34;color:#75715e&#34;&gt;// 자식 기다리기&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;이 코드는 부모가 메시지를 보내고 자식이 그것을 출력하는 간단한 파이프 예제입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>일반 함수 호출 (User-level Function Call) vs 시스템 콜 (System Call) 호출 방식의 차이</title>
      <link>http://localhost:1313/02.inbox/%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C-user-level-function-call-vs-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C-system-call-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%B0%A8%EC%9D%B4/</link>
      <pubDate>Tue, 11 Mar 2025 11:39:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C-user-level-function-call-vs-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C-system-call-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%B0%A8%EC%9D%B4/</guid>
      <description>&lt;p&gt;시스템 콜(system call)은 사용자 프로그램이 커널의 기능을 간접적으로 호출하는 메커니즘이며, **매핑 테이블(시스템 콜 테이블)**을 통해 실제 커널 함수로 연결됩니다. 일반 함수 호출과 시스템 콜의 동작 방식을 인텔 어셈블리 문법과 함께 비교 설명합니다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-일반-함수-호출-user-level-function-call&#34;&gt;&lt;strong&gt;1. 일반 함수 호출 (User-level Function Call)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;동작-방식&#34;&gt;&lt;strong&gt;동작 방식&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;직접 호출&lt;/strong&gt;: 호출자(caller)가 함수의 메모리 주소를 직접 참조합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;파라미터 전달&lt;/strong&gt;: 레지스터 또는 스택을 사용합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;제어권 이동&lt;/strong&gt;: 사용자 공간 내에서만 실행되며, 커널 모드 전환 없이 동작합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;예시-간단한-덧셈-함수-호출&#34;&gt;&lt;strong&gt;예시: 간단한 덧셈 함수 호출&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;.data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;num1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dd&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;num2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dd&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_start&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; 파라미터 전달 (레지스터 사용)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;num1&lt;/span&gt;]  &lt;span style=&#34;color:#75715e&#34;&gt;; EAX = 10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;num2&lt;/span&gt;]  &lt;span style=&#34;color:#75715e&#34;&gt;; EBX = 20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;add_numbers&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; 함수 호출&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; 종료 (시스템 콜 예시로 대체 가능)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;; sys_exit 시스템 콜 번호&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;; 커널 호출&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_numbers:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;; EAX = EAX + EBX&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;              &lt;span style=&#34;color:#75715e&#34;&gt;; 결과 반환&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;: &lt;code&gt;call&lt;/code&gt; 명령어로 직접 함수 주소로 점프 → 커널 개입 없이 사용자 공간에서 실행.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-시스템-콜-system-call&#34;&gt;&lt;strong&gt;2. 시스템 콜 (System Call)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;동작-방식-1&#34;&gt;&lt;strong&gt;동작 방식&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;간접 호출&lt;/strong&gt;: 시스템 콜 번호를 **매핑 테이블(sys_call_table)**에 전달해 커널 함수를 찾아 실행합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;모드 전환&lt;/strong&gt;: 사용자 모드 → 커널 모드 전환 (特权级别 변경).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;파라미터 전달&lt;/strong&gt;: 레지스터에 시스템 콜 번호와 인자 저장 (예: &lt;code&gt;eax&lt;/code&gt;, &lt;code&gt;ebx&lt;/code&gt;, &lt;code&gt;ecx&lt;/code&gt; 등).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;시스템-콜-테이블의-역할&#34;&gt;&lt;strong&gt;시스템 콜 테이블의 역할&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;커널은 &lt;strong&gt;sys_call_table&lt;/strong&gt;이라는 배열을 유지하며, 각 인덱스는 시스템 콜 번호에 해당합니다.&lt;/li&gt;&#xA;&lt;li&gt;예: Linux x86에서 &lt;code&gt;sys_write&lt;/code&gt;의 시스템 콜 번호는 &lt;code&gt;4&lt;/code&gt;입니다.&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Linux 커널 소스 (unistd_32.h)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define __NR_write 4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;예시&#34;&gt;&lt;strong&gt;예시: &lt;code&gt;sys_write&lt;/code&gt; 시스템 콜 호출&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;.data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;db&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Hello&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;World&lt;/span&gt;!&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;; 출력 메시지 (0xA = 개행)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;equ&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$&lt;/span&gt; - &lt;span style=&#34;color:#66d9ef&#34;&gt;msg&lt;/span&gt;               &lt;span style=&#34;color:#75715e&#34;&gt;; 메시지 길이&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_start&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; 시스템 콜 파라미터 설정 (레지스터 사용)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;; sys_write 시스템 콜 번호 (NR_write = 4)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;; 파일 디스크립터 (stdout = 1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;msg&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;; 메시지 주소&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;len&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;; 메시지 길이&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;; 커널 모드 전환 (소프트웨어 인터럽트)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; 프로그램 종료&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;; sys_exit 시스템 콜 번호&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;; 반환 값 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;시스템-콜-처리-과정&#34;&gt;&lt;strong&gt;시스템 콜 처리 과정&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;인터럽트 발생&lt;/strong&gt;: &lt;code&gt;int 0x80&lt;/code&gt; 또는 &lt;code&gt;syscall&lt;/code&gt; 명령어로 커널 모드 진입.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;시스템 콜 번호 확인&lt;/strong&gt;: &lt;code&gt;eax&lt;/code&gt; 레지스터에서 시스템 콜 번호를 읽습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;매핑 테이블 조회&lt;/strong&gt;: 커널은 &lt;code&gt;sys_call_table&lt;/code&gt;에서 해당 번호의 함수 포인터를 찾습니다.&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 커널 내부 sys_call_table 예시 (x86)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;asmlinkage &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sys_write&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; __user &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buf, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; count);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;함수 실행&lt;/strong&gt;: 매핑된 커널 함수(예: &lt;code&gt;sys_write&lt;/code&gt;)를 실행합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;결과 반환&lt;/strong&gt;: 사용자 모드로 복귀 후 결과를 레지스터(&lt;code&gt;eax&lt;/code&gt;)에 저장합니다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-시스템-콜-vs-일반-함수-호출의-핵심-차이&#34;&gt;&lt;strong&gt;3. 시스템 콜 vs 일반 함수 호출의 핵심 차이&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;구분&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;일반 함수 호출&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;시스템 콜&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;실행 모드&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;사용자 모드 (User Mode)&lt;/td&gt;&#xA;          &lt;td&gt;커널 모드 (Kernel Mode)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;호출 방식&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;직접 호출 (&lt;code&gt;call&lt;/code&gt; 명령어)&lt;/td&gt;&#xA;          &lt;td&gt;간접 호출 (인터럽트/시스템 콜 명령어)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;파라미터 전달&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;레지스터/스택&lt;/td&gt;&#xA;          &lt;td&gt;레지스터 (커널에서 정의한 규칙)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;오버헤드&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;낮음 (메모리 접근만 발생)&lt;/td&gt;&#xA;          &lt;td&gt;높음 (모드 전환, 컨텍스트 스위칭)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;보안&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;제한 없음&lt;/td&gt;&#xA;          &lt;td&gt;커널이 검증 후 실행&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;시스템-콜-테이블의-구조-linux-x86-예시&#34;&gt;&lt;strong&gt;시스템 콜 테이블의 구조 (Linux x86 예시)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// arch/x86/kernel/syscall_32.c (커널 소스)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; asmlinkage &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sys_write&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; __user &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; asmlinkage &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sys_read&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; __user &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sys_call_ptr_t&lt;/span&gt; sys_call_table[__NR_syscall_max &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ... __NR_syscall_max] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;sys_ni_syscall,  &lt;span style=&#34;color:#75715e&#34;&gt;// 기본값: 지원되지 않는 시스템 콜&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    [__NR_write] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys_write,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [__NR_read] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys_read,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ... (다른 시스템 콜 매핑)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;간접 참조&lt;/strong&gt;: &lt;code&gt;sys_call_table[__NR_write]&lt;/code&gt; → &lt;code&gt;sys_write&lt;/code&gt; 함수 포인터.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;요약&#34;&gt;&lt;strong&gt;요약&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;일반 함수 호출&lt;/strong&gt;: 사용자 공간 내에서 직접 실행되며, 빠르지만 권한이 제한적입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;시스템 콜&lt;/strong&gt;: 커널의 매핑 테이블을 통해 간접적으로 실행되며, 모드 전환과 검증 과정을 거쳐 안전하게 하드웨어/커널 자원을 제어합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: &lt;code&gt;int 0x80&lt;/code&gt;은 커널의 &lt;strong&gt;인터럽트 핸들러&lt;/strong&gt;를 호출해 시스템 콜 테이블을 조회하고, 실제 함수(예: &lt;code&gt;sys_write&lt;/code&gt;)를 실행합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>asm parameter passing 인자 전달 방식</title>
      <link>http://localhost:1313/02.inbox/asm-parameter-passing-%EC%9D%B8%EC%9E%90-%EC%A0%84%EB%8B%AC-%EB%B0%A9%EC%8B%9D/</link>
      <pubDate>Tue, 11 Mar 2025 11:35:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/asm-parameter-passing-%EC%9D%B8%EC%9E%90-%EC%A0%84%EB%8B%AC-%EB%B0%A9%EC%8B%9D/</guid>
      <description>&lt;p&gt;다음은 인텔 어셈블리 문법으로 각 파라미터 전달 방식을 구현한 예시&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-register를-통한-파라미터-전달&#34;&gt;&lt;strong&gt;1. Register를 통한 파라미터 전달&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;.data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; (데이터 섹션은 필요 시 정의)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_start&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; 두 정수를 레지스터로 전달 (EAX=5, EBX=10)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;add_registers&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;; 함수 호출&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; 결과 확인 (EAX에 저장됨)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; ... (종료 코드 생략)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_registers:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;; EAX = EAX + EBX&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;; 결과를 EAX에 반환&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;: 레지스터(&lt;code&gt;eax&lt;/code&gt;, &lt;code&gt;ebx&lt;/code&gt;)에 직접 값 저장 → 빠른 접근 가능.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;주의&lt;/strong&gt;: 레지스터 수가 제한적이므로 복잡한 함수에는 부적합.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-memory를-통한-파라미터-전달-포인터-사용&#34;&gt;&lt;strong&gt;2. Memory를 통한 파라미터 전달 (포인터 사용)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;.data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;var1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dd&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;; 32비트 정수 (15)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;var2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dd&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;; 32비트 정수 (25)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_start&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; 메모리 주소를 레지스터로 전달&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;esi&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;var1&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;; ESI = var1의 주소&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;edi&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;var2&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;; EDI = var2의 주소&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;add_memory&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; 함수 호출&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; ... (종료 코드 생략)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_memory:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;esi&lt;/span&gt;]  &lt;span style=&#34;color:#75715e&#34;&gt;; EAX = [var1] (15)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;edi&lt;/span&gt;]  &lt;span style=&#34;color:#75715e&#34;&gt;; EAX += [var2] (25)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;; 결과 반환&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;: 메모리 주소를 레지스터(&lt;code&gt;esi&lt;/code&gt;, &lt;code&gt;edi&lt;/code&gt;)로 전달 → 대용량 데이터 처리 가능.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;주의&lt;/strong&gt;: 메모리 접근 오버헤드 발생 (캐시 미스 시 성능 저하).&#xA;일반적으로 힙 영역에 적층&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-stack을-통한-파라미터-전달&#34;&gt;&lt;strong&gt;3. Stack을 통한 파라미터 전달&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;.data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; (데이터 섹션은 필요 시 정의)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_start&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_start:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; 스택에 파라미터 푸시 (역순으로 전달)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;; 두 번째 인자&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;; 첫 번째 인자&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;add_stack&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;; 함수 호출&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; 스택 정리 (cdecl 규약: 호출자가 정리)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;; 2개의 DWORD(4바이트*2) 제거&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; ... (종료 코드 생략)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_stack:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;; 베이스 포인터 보존&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; 스택 프레임 설정&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; [ebp+8] = 첫 번째 인자 (40)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; [ebp+12] = 두 번째 인자 (30)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;; 베이스 포인터 복구&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;; 결과 반환&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;: 스택을 통해 인자 전달 → 재귀 호출 등 복잡한 로직에 적합.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;주의&lt;/strong&gt;: 스택 오버플로우 위험 (너무 큰 데이터 전달 금지).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;키-포인트&#34;&gt;&lt;strong&gt;키 포인트&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Register&lt;/strong&gt;: 빠르지만 제한적 → 최적화된 코드에 사용.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: 대용량 데이터 처리 가능 → 구조체/배열 전달 시 유리.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Stack&lt;/strong&gt;: 함수 호출 관리 용이 → 대부분의 고수준 언어 기본 방식.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;인텔 문법에서 &lt;code&gt;mov eax, [ebx]&lt;/code&gt;는 &amp;ldquo;ebx가 가리키는 메모리 값 로드&amp;quot;이며, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;은 스택 조작 명령어입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>abi</title>
      <link>http://localhost:1313/02.inbox/abi/</link>
      <pubDate>Wed, 22 Jan 2025 18:31:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/abi/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gcc-arm-[플렛폼]-[ABI 타입]&#xA;&#xA;&#xA;gcc-arm-linux-gnueabi/jammy 4:11.2.0-1ubuntu1 amd64&#xA;  GNU C compiler for the armel architecture&#xA;&#xA;gcc-arm-linux-gnueabihf/jammy 4:11.2.0-1ubuntu1 amd64&#xA;  GNU C compiler for the armhf architecture&#xA;&#xA;gcc-arm-none-eabi/jammy 15:10.3-2021.07-4 amd64&#xA;  GCC cross compiler for ARM Cortex-R/M processors&#xA;&#xA;gcc-arm-none-eabi-source/jammy 15:10.3-2021.07-4 all&#xA;  GCC cross compiler for ARM Cortex-R/M processors (source)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;arm-none-eabi-gcc&lt;/p&gt;&#xA;&lt;p&gt;ABI는 &amp;ldquo;Application Binary Interface&amp;quot;의 약자로, 소프트웨어와 하드웨어 간의 상호작용을 정의하는 규약입니다. ABI는 다음과 같은 요소를 포함합니다:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;데이터 타입: 데이터의 크기, 정렬 방식, 표현 방식 등을 정의합니다.&lt;/li&gt;&#xA;&lt;li&gt;함수 호출 규약: 함수에 인자를 전달하는 방법, 반환 값 처리, 스택 관리 등을 규정합니다.&lt;/li&gt;&#xA;&lt;li&gt;레지스터 사용: CPU 레지스터의 사용 방식과 어떤 레지스터가 어떤 용도로 사용되는지를 정의합니다.&lt;/li&gt;&#xA;&lt;li&gt;바이너리 형식: 실행 파일과 라이브러리의 구조와 형식에 대해 설명합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>리눅스 시스템 기본</title>
      <link>http://localhost:1313/%EC%8B%A4%EC%8A%B5%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B5%AC%EC%A1%B0/%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B8%B0%EB%B3%B8/</link>
      <pubDate>Mon, 04 Mar 2024 17:29:00 +0900</pubDate>
      <guid>http://localhost:1313/%EC%8B%A4%EC%8A%B5%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B5%AC%EC%A1%B0/%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B8%B0%EB%B3%B8/</guid>
      <description>&lt;p&gt;운영 체제 레벨의 패키지 관리자로는 아래와 같은 것들이 있습니다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;dnf&lt;/code&gt;: Fedora 리눅스에서 사용되는 패키지 관리자로, yum의 최신 버전입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;pacman&lt;/code&gt;: Arch 리눅스에서 사용되는 패키지 관리자입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;zypper&lt;/code&gt;: openSUSE에서 사용되는 패키지 관리자입니다.&#xA;apt yum brew&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;프로그래밍 언어 레벨의 패키지 관리자로는 아래와 같은 것들이 있습니다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;gem&lt;/code&gt;: Ruby 언어의 패키지 관리자입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;composer&lt;/code&gt;: PHP 언어의 패키지 관리자입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;nuget&lt;/code&gt;: .NET 언어의 패키지 관리자입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;maven&lt;/code&gt;과 &lt;code&gt;gradle&lt;/code&gt;: Java 언어의 패키지 관리자입니다.&#xA;pip, cargo, npm&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;시스템 콜의 종류&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;﻿﻿프로세스 생성, 삭제&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿메모리 확보, 해제&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿프로세스 간 통신(IPC)&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿네트워크&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿파일시스템 다루기&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿파일 다루기(디바이스 접근)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;strace : 시스템 호출 목록 확인&#xA;os 제공&lt;/p&gt;</description>
    </item>
    <item>
      <title>ascii code</title>
      <link>http://localhost:1313/02.inbox/ascii-code/</link>
      <pubDate>Wed, 20 Dec 2023 07:12:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/ascii-code/</guid>
      <description>&lt;p&gt;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20231213153502.png&#34; alt=&#34;Untitled (Image resource not found)&#34; &gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20231223153501.png&#34; alt=&#34;Untitled 1 (Image resource not found)&#34; &gt;&lt;/p&gt;&#xA;&lt;p&gt;제어 문자&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;0 (Null) - 십진수 0에 해당하는 제어 문자입니다. 주로 문자열의 종료를 나타내는 데 사용됩니다.&lt;/li&gt;&#xA;&lt;li&gt;1 (Start of Heading) - 통신 제어에서 사용되는 제어 문자로, 통신 헤더의 시작을 나타냅니다.&lt;/li&gt;&#xA;&lt;li&gt;2 (Start of Text) - 통신 제어에서 사용되는 제어 문자로, 텍스트 데이터의 시작을 나타냅니다.&lt;/li&gt;&#xA;&lt;li&gt;3 (End of Text) - 통신 제어에서 사용되는 제어 문자로, 텍스트 데이터의 종료를 나타냅니다.&lt;/li&gt;&#xA;&lt;li&gt;4 (End of Transmission) - 통신 제어에서 사용되는 제어 문자로, 전송의 종료를 나타냅니다.&lt;/li&gt;&#xA;&lt;li&gt;5 (Enquiry) - 통신 제어에서 사용되는 제어 문자로, 상대방에게 정보 요청을 나타냅니다.&lt;/li&gt;&#xA;&lt;li&gt;6 (Acknowledge) - 통신 제어에서 사용되는 제어 문자로, 정보 수신을 확인하는 신호를 나타냅니다.&lt;/li&gt;&#xA;&lt;li&gt;7 (Bell) - 터미널이나 출력 장치에서 경고음을 발생시키는 제어 문자입니다.&lt;/li&gt;&#xA;&lt;li&gt;8 (Backspace) - 커서를 한 칸 뒤로 이동시키는 제어 문자입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;공백문자&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
