<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Register on My Test Site</title>
    <link>http://localhost:1313/tags/register/</link>
    <description>Recent content in Register on My Test Site</description>
    <generator>Hugo</generator>
    <language>ko-KR</language>
    <lastBuildDate>Fri, 20 Dec 2024 09:02:00 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/register/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>x86 64 레지스터 최소 설명</title>
      <link>http://localhost:1313/02.inbox/x86-64-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0-%EC%B5%9C%EC%86%8C-%EC%84%A4%EB%AA%85/</link>
      <pubDate>Fri, 20 Dec 2024 09:02:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/x86-64-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0-%EC%B5%9C%EC%86%8C-%EC%84%A4%EB%AA%85/</guid>
      <description>&lt;p&gt;x86-64 아키텍처에서 각 레지스터는 특정 목적이나 일반적인 연산에 사용됩니다. 이들은 64비트 레지스터이며, 일부는 하위 32비트, 16비트, 8비트 단위로도 사용할 수 있습니다. 여기서는 주요 레지스터와 그 역할을 설명하겠습니다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;범용-레지스터-general-purpose-registers&#34;&gt;&lt;strong&gt;범용 레지스터 (General-Purpose Registers)&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;레지스터&lt;/th&gt;&#xA;          &lt;th&gt;역할/사용 목적&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RAX&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 주로 산술 연산(곱셈, 나눗셈)의 결과 저장&lt;br&gt;- 함수 호출 시 반환값 저장&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RBX&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 일반 데이터 저장 (callee-saved: 함수 호출 후 유지됨)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RCX&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 반복 연산의 카운터로 사용 (&lt;code&gt;loop&lt;/code&gt; 명령어에서 사용)&lt;br&gt;- 함수 호출 시 세 번째 인수 전달 (Windows x64 ABI 기준)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RDX&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 입출력 연산 및 곱셈/나눗셈에서 사용- 함수 호출 시 두 번째 인수 전달&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RSI&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 문자열 조작에서 소스 주소 (Source Index)&lt;br&gt;- 함수 호출 시 첫 번째 인수 전달 (Linux x86-64 ABI 기준)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RDI&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 문자열 조작에서 대상 주소 (Destination Index)&lt;br&gt;- 함수 호출 시 첫 번째 인수 전달 (Windows x64 ABI 기준)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RBP&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 베이스 포인터 (Base Pointer)&lt;br&gt;- 함수 호출 시 스택 프레임을 추적&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RSP&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 스택 포인터 (Stack Pointer)&lt;br&gt;- 현재 스택의 최상단을 가리킴&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;R8~R15&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 추가 범용 레지스터&lt;br&gt;- 함수 호출 시 추가 인수 전달 (Linux 및 Windows x64 ABI)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;특수-목적-레지스터&#34;&gt;&lt;strong&gt;특수 목적 레지스터&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;레지스터&lt;/th&gt;&#xA;          &lt;th&gt;역할/사용 목적&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RIP&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 명령 포인터 (Instruction Pointer)&lt;br&gt;- 현재 실행 중인 명령어의 주소&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RFLAGS&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 플래그 레지스터&lt;br&gt;- 연산 결과의 상태(예: 캐리, 오버플로, 제로 등) 저장&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RSP&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 스택 포인터&lt;br&gt;- 함수 호출 및 지역 변수 할당 관리&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RBP&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- 베이스 포인터&lt;br&gt;- 스택 프레임의 기준점 역할&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;세그먼트-레지스터&#34;&gt;&lt;strong&gt;세그먼트 레지스터&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;레지스터&lt;/th&gt;&#xA;          &lt;th&gt;역할/사용 목적&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;CS&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;코드 세그먼트 (Code Segment)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;DS&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;데이터 세그먼트 (Data Segment)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;SS&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;스택 세그먼트 (Stack Segment)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;ES, FS, GS&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;추가 세그먼트&lt;br&gt;- 주로 OS 및 특정 상황에서 사용&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;레지스터-크기&#34;&gt;&lt;strong&gt;레지스터 크기&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;x86-64에서 각 레지스터는 이름에 따라 하위 크기를 참조할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>x86 64 CPU 레지스터(Register)의 개념 및 종류</title>
      <link>http://localhost:1313/temp/x86-64-cpu-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0register%EC%9D%98-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%A2%85%EB%A5%98/</link>
      <pubDate>Wed, 20 Mar 2024 14:24:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/x86-64-cpu-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0register%EC%9D%98-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%A2%85%EB%A5%98/</guid>
      <description>&lt;p&gt;32bit, 64bit 운영체제에서 32bit, 64bit 는 레지스터 및 데이터 경로의 크기 를 의미한다.&lt;br&gt;&#xA;위 예시에서 AH 는 8bit 운영체제와 호환되는 레지스터라고 이해하면 된다. &lt;/p&gt;&#xA;&lt;p&gt; 운영체제의 발전에 따라, 수행해야할 기능이 많아지면서&lt;br&gt;&#xA;많은 정보를 다룰 수 있도록 새로운 레지스터가 추가되고, 크기도 점점 커졌다.&lt;/p&gt;&#xA;&lt;p&gt; *  E 는 Extended 의 약자. R은 왜 R인지 모르겠다..&lt;br&gt;&#xA;* CPU의 아키텍쳐에 따라 레지스터의 종류가 다를 수 있다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;범용-레지스터&#34;&gt;&lt;strong&gt;범용 레지스터&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;====&#xA;범용 레지스터는 연산 결과의 임시 저장, 산술 및 논리 연산, 주소 색인 등 다양한 용도로 사용되는 다목적 레지스터이다.&lt;br&gt;&#xA;종류는 EAX, EBX, ECX, EDX, ESI, EDI, ESP, EBP, EIP 가 있다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
