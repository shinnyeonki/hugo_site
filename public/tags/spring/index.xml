<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on My Test Site</title>
    <link>http://localhost:1313/tags/spring/</link>
    <description>Recent content in Spring on My Test Site</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 19 Oct 2025 18:28:32 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>백엔드 구조 변화 역사</title>
      <link>http://localhost:1313/02.inbox/%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B5%AC%EC%A1%B0-%EB%B3%80%ED%99%94-%EC%97%AD%EC%82%AC/</link>
      <pubDate>Sun, 19 Oct 2025 18:28:32 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B5%AC%EC%A1%B0-%EB%B3%80%ED%99%94-%EC%97%AD%EC%82%AC/</guid>
      <description>&lt;h2 id=&#34;모델-1에서-모델-2로의-진화-웹-개발-아키텍처-심층-분석&#34;&gt;모델 1에서 모델 2로의 진화: 웹 개발 아키텍처 심층 분석&lt;/h2&gt;&#xA;&lt;p&gt;현대 백엔드 개발의 핵심 철학&lt;/p&gt;&#xA;&lt;h3 id=&#34;서론-왜-아키텍처는-중요한가&#34;&gt;서론: 왜 아키텍처는 중요한가?&lt;/h3&gt;&#xA;&lt;p&gt;소프트웨어 개발은 단순히 &amp;lsquo;동작하는 코드&amp;rsquo;를 만드는 행위에서 그치지 않습니다. 시간이 지나면서 요구사항은 끊임없이 변화하고, 새로운 기술이 등장하며, 비즈니스는 확장됩니다. 이러한 변화의 파도 속에서 흔들리지 않는 견고하고 유연한 시스템을 구축하는 것, 이것이 바로 &amp;lsquo;아키텍처&amp;rsquo;의 역할입니다. 제공된 텍스트는 웹 애플리케이션 개발 아키텍처의 중요한 변곡점인 &lt;strong&gt;모델 1&lt;/strong&gt;과 &lt;strong&gt;모델 2&lt;/strong&gt;의 차이를 통해, 좋은 아키텍처가 무엇이며 어떻게 발전해 왔는지를 심도 있게 이야기하고 있습니다. 이는 단순히 기술의 변화가 아닌, &amp;lsquo;문제 해결 방식&amp;rsquo;에 대한 패러다임의 전환을 의미합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>spring RequestMapping 구현체</title>
      <link>http://localhost:1313/02.inbox/spring-requestmapping-%EA%B5%AC%ED%98%84%EC%B2%B4/</link>
      <pubDate>Tue, 19 Aug 2025 22:16:22 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/spring-requestmapping-%EA%B5%AC%ED%98%84%EC%B2%B4/</guid>
      <description>&lt;p&gt;스프링 MVC의 &lt;strong&gt;&lt;code&gt;HandlerMapping&lt;/code&gt; 구현체&lt;/strong&gt;는 다양한 방식으로 요청을 핸들러(컨트롤러)에 매핑합니다. 각 클래스의 역할과 특징을 체계적으로 정리했습니다:&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-abstracthandlermapping&#34;&gt;1. &lt;strong&gt;&lt;code&gt;AbstractHandlerMapping&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: 모든 &lt;code&gt;HandlerMapping&lt;/code&gt;의 &lt;strong&gt;기반 추상 클래스&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;인터셉터(&lt;code&gt;HandlerInterceptor&lt;/code&gt;) 관리 및 실행 로직을 제공합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;getHandler()&lt;/code&gt; 메서드를 구현해 실제 핸들러를 찾는 로직을 정의합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;사용 예시&lt;/strong&gt;:&lt;br&gt;&#xA;다른 구체적인 &lt;code&gt;HandlerMapping&lt;/code&gt; 클래스들이 이 클래스를 상속받아 확장합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-abstracturlhandlermapping&#34;&gt;2. &lt;strong&gt;&lt;code&gt;AbstractUrlHandlerMapping&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;URL 기반 매핑&lt;/strong&gt;을 위한 추상 클래스.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;URL 패턴과 핸들러를 연결하는 공통 로직을 제공합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;urlMap&lt;/code&gt; 또는 &lt;code&gt;handlerMap&lt;/code&gt;을 사용해 URL-핸들러 매핑 정보를 저장합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;하위 클래스&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;BeanNameUrlHandlerMapping&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SimpleUrlHandlerMapping&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AbstractDetectingUrlHandlerMapping&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-beannameurlhandlermapping&#34;&gt;3. &lt;strong&gt;&lt;code&gt;BeanNameUrlHandlerMapping&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;스프링 빈 이름을 URL로 매핑&lt;/strong&gt;합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>의존관계 주입(dependency injection)</title>
      <link>http://localhost:1313/temp/%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85dependency-injection/</link>
      <pubDate>Tue, 19 Aug 2025 22:14:39 +0900</pubDate>
      <guid>http://localhost:1313/temp/%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85dependency-injection/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;생성자 주입&lt;/li&gt;&#xA;&lt;li&gt;설정자 수정자 주입(setter)&lt;/li&gt;&#xA;&lt;li&gt;필드 주입&lt;/li&gt;&#xA;&lt;li&gt;일반 메서드 주입&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;생성자-주입&#34;&gt;생성자 주입&lt;/h2&gt;&#xA;&lt;p&gt;생성자 주입(Constructor Injection) 이 방법 객체 생성 시점 의존성 부여&#xA;불변,필수&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleClass&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SomeDependency dependency;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleClass&lt;/span&gt;(SomeDependency dependency) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dependency&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dependency;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;spring 에서는 @Autowired 를 통해 의존성을 주입하는데&#xA;생성자가 1개 라면 생략 가능하다&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;설정자-주입&#34;&gt;설정자 주입&lt;/h2&gt;&#xA;&lt;p&gt;설정자 주입(Setter Injection) 이 방법은 객체 생성 이후에도 의존성 변경 가능&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExampleClass&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SomeDependency dependency;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setDependency&lt;/span&gt;(SomeDependency dependency) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dependency&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dependency;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;필드-주입&#34;&gt;필드 주입&lt;/h2&gt;&#xA;&lt;p&gt;필드 주입(Field Injection)&lt;/p&gt;</description>
    </item>
    <item>
      <title>싱글톤 내부 의존관계로 프로토타입 스코프의 bean 을 가질때</title>
      <link>http://localhost:1313/02.inbox/%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%82%B4%EB%B6%80-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84%EB%A1%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%8A%A4%EC%BD%94%ED%94%84%EC%9D%98-bean-%EC%9D%84-%EA%B0%80%EC%A7%88%EB%95%8C/</link>
      <pubDate>Tue, 19 Aug 2025 22:14:19 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%82%B4%EB%B6%80-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84%EB%A1%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%8A%A4%EC%BD%94%ED%94%84%EC%9D%98-bean-%EC%9D%84-%EA%B0%80%EC%A7%88%EB%95%8C/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Scope&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;singleton&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ClientBean&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ObjectProvider&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;PrototypeBean&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; prototypeBeanProvider; &lt;span style=&#34;color:#75715e&#34;&gt;// 객체를 필요한 시점에 찾아서 주입받는 경우에 사용&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// private final PrototypeBean prototypeBean;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// @Autowired&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// public ClientBean(PrototypeBean prototypeBean){ // 생성시점에 주입&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     this.prototypeBean = prototypeBean;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// }&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logic&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PrototypeBean prototypeBean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prototypeBeanProvider.&lt;span style=&#34;color:#a6e22e&#34;&gt;getObject&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;    &lt;span style=&#34;color:#75715e&#34;&gt;//ApplicationContext ac = &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;    &lt;span style=&#34;color:#75715e&#34;&gt;//new AnnotationConfigApplicationContext();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//ac.getBean(PrototypeBean.class);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Scope&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prototype&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrototypeBean&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addCount&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;Prototype 타입의 객체는 지속적으로 객체를 새로 생성하고자 하는 목적으로 만들었으나 @Autowired 속성, ClientBean 의 singleton scope 속성으로 인해 bean 의존관계 단계에서 미리 생성되어 버림 그리고 다시 생성되지 않음&lt;/p&gt;</description>
    </item>
    <item>
      <title>서블릿 객체들</title>
      <link>http://localhost:1313/younghan-mvc1/%EC%84%9C%EB%B8%94%EB%A6%BF-%EA%B0%9D%EC%B2%B4%EB%93%A4/</link>
      <pubDate>Tue, 19 Aug 2025 22:14:18 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/%EC%84%9C%EB%B8%94%EB%A6%BF-%EA%B0%9D%EC%B2%B4%EB%93%A4/</guid>
      <description>&lt;h3 id=&#34;1-각-객체의-정의-및-내부-구조&#34;&gt;1. &lt;strong&gt;각 객체의 정의 및 내부 구조&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;11-page-pagecontext-jsp-의존적&#34;&gt;&lt;strong&gt;1.1 page (PageContext)&lt;/strong&gt; jsp 의존적&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;범위&lt;/strong&gt;: 현재 JSP 페이지 내에서만 유효합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;수명&lt;/strong&gt;: 페이지가 렌더링되는 동안에만 유지됩니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;내부 구조&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;PageContext&lt;/code&gt; 클래스에 의해 구현되며, 페이지 단위로 속성을 저장합니다.&lt;/li&gt;&#xA;&lt;li&gt;내부적으로 &lt;strong&gt;&lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt; 를 사용하지만, &lt;code&gt;getAttributeNames()&lt;/code&gt; 메서드를 지원하지 않습니다.&lt;/li&gt;&#xA;&lt;li&gt;JSP의 다른 기본 객체(request, session, application)에 대한 접근을 제공합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;JSP 의존성&lt;/strong&gt;: &lt;strong&gt;O&lt;/strong&gt; (JSP 전용 객체이며, Servlet에서는 사용 불가능합니다.)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;12-request-httpservletrequest&#34;&gt;&lt;strong&gt;1.2 request (HttpServletRequest)&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;범위&lt;/strong&gt;: 같은 요청(request) 내에서 유효합니다 (예: 클라이언트에서 서버로의 한 번의 HTTP 요청).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;수명&lt;/strong&gt;: 요청이 처리되는 동안에만 유지됩니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;내부 구조&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;HttpServletRequest&lt;/code&gt;의 &lt;code&gt;setAttribute()&lt;/code&gt;/&lt;code&gt;getAttribute()&lt;/code&gt; 메서드를 사용합니다.&lt;/li&gt;&#xA;&lt;li&gt;컨테이너(예: Tomcat)는 내부적으로 &lt;strong&gt;&lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt; 구조로 속성을 관리합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;JSP 의존성&lt;/strong&gt;: &lt;strong&gt;X&lt;/strong&gt; (Servlet에서도 사용 가능하며, JSP와 독립적입니다.)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;13-session-httpsession&#34;&gt;&lt;strong&gt;1.3 session (HttpSession)&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;범위&lt;/strong&gt;: 동일한 사용자의 세션(Session) 내에서 유효합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;수명&lt;/strong&gt;: 세션이 종료될 때까지 유지됩니다 (기본적으로 30분).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;내부 구조&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;HttpSession&lt;/code&gt; 객체에 속성을 저장하며, 컨테이너는 &lt;strong&gt;&lt;code&gt;ConcurrentHashMap&amp;lt;String, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt; 를 사용하여 동시성 문제를 해결합니다.&lt;/li&gt;&#xA;&lt;li&gt;세션 ID를 기반으로 사용자를 식별합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;JSP 의존성&lt;/strong&gt;: &lt;strong&gt;X&lt;/strong&gt; (Servlet에서도 사용 가능하며, JSP와 독립적입니다.)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;14-application-servletcontext&#34;&gt;&lt;strong&gt;1.4 application (ServletContext)&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;범위&lt;/strong&gt;: 애플리케이션 전체(모든 사용자 및 세션)에서 유효합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;수명&lt;/strong&gt;: 애플리케이션이 종료될 때까지 유지됩니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;내부 구조&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ServletContext&lt;/code&gt; 객체에 속성을 저장하며, 컨테이너는 &lt;strong&gt;&lt;code&gt;ConcurrentHashMap&amp;lt;String, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt; 를 사용합니다.&lt;/li&gt;&#xA;&lt;li&gt;모든 사용자와 세션에서 공유되는 전역 데이터를 관리합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;JSP 의존성&lt;/strong&gt;: &lt;strong&gt;X&lt;/strong&gt; (Servlet에서도 사용 가능하며, JSP와 독립적입니다.)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-속성-처리-메서드-비교&#34;&gt;2. &lt;strong&gt;속성 처리 메서드 비교&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;메서드&lt;/th&gt;&#xA;          &lt;th&gt;page (PageContext)&lt;/th&gt;&#xA;          &lt;th&gt;request (HttpServletRequest)&lt;/th&gt;&#xA;          &lt;th&gt;session (HttpSession)&lt;/th&gt;&#xA;          &lt;th&gt;application (ServletContext)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;setAttribute()&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;getAttribute()&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;removeAttribute()&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;getAttributeNames()&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;X&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;page 객체&lt;/strong&gt;는 &lt;code&gt;getAttributeNames()&lt;/code&gt;를 지원하지 않습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;request, session, application&lt;/strong&gt;은 &lt;code&gt;getAttributeNames()&lt;/code&gt;로 속성 목록을 조회할 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-jsp-의존성-분석&#34;&gt;3. &lt;strong&gt;JSP 의존성 분석&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;page 객체&lt;/strong&gt;:&lt;br&gt;&#xA;JSP 전용 객체이며, &lt;code&gt;PageContext&lt;/code&gt; 클래스에 종속적입니다. Servlet에서는 사용할 수 없습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;request, session, application 객체&lt;/strong&gt;:&lt;br&gt;&#xA;Servlet API(&lt;code&gt;HttpServletRequest&lt;/code&gt;, &lt;code&gt;HttpSession&lt;/code&gt;, &lt;code&gt;ServletContext&lt;/code&gt;)에 정의된 표준 객체입니다. 따라서 &lt;strong&gt;JSP와 독립적&lt;/strong&gt;이며, Servlet이나 다른 웹 프레임워크에서 동일하게 사용됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-사용-예시&#34;&gt;4. &lt;strong&gt;사용 예시&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-request-범위&#34;&gt;1. &lt;strong&gt;request 범위&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-jsp&#34; data-lang=&#34;jsp&#34;&gt;&amp;lt;!-- JSP 페이지에서 request 속성 설정 --&amp;gt;&#xA;&amp;lt;%&#xA;  request.setAttribute(&amp;#34;userName&amp;#34;, &amp;#34;Alice&amp;#34;);&#xA;%&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Servlet에서 request 속성 사용&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doGet&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (String) request.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;userName&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-session-범위&#34;&gt;2. &lt;strong&gt;session 범위&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-jsp&#34; data-lang=&#34;jsp&#34;&gt;&amp;lt;!-- JSP에서 세션 속성 설정 --&amp;gt;&#xA;&amp;lt;%&#xA;  session.setAttribute(&amp;#34;userRole&amp;#34;, &amp;#34;ADMIN&amp;#34;);&#xA;%&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;3-application-범위&#34;&gt;3. &lt;strong&gt;application 범위&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-jsp&#34; data-lang=&#34;jsp&#34;&gt;&amp;lt;!-- JSP에서 애플리케이션 속성 설정 --&amp;gt;&#xA;&amp;lt;%&#xA;  application.setAttribute(&amp;#34;appVersion&amp;#34;, &amp;#34;1.0.0&amp;#34;);&#xA;%&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;5-중요-고려-사항&#34;&gt;5. &lt;strong&gt;중요 고려 사항&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;범위 선택&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>spring controller 추상화 단계별 어노테이션 파라미터</title>
      <link>http://localhost:1313/02.inbox/spring-controller-%EC%B6%94%EC%83%81%ED%99%94-%EB%8B%A8%EA%B3%84%EB%B3%84-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0/</link>
      <pubDate>Sat, 12 Jul 2025 13:15:36 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/spring-controller-%EC%B6%94%EC%83%81%ED%99%94-%EB%8B%A8%EA%B3%84%EB%B3%84-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0/</guid>
      <description>&lt;h3 id=&#34;추상화-단계별-설명&#34;&gt;추상화 단계별 설명&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Level 1: Servlet API 직접 사용 (가장 낮은 추상화 단계)&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring이 있기 전, Java 웹 개발의 근간인 Servlet API를 직접 사용하는 방식입니다.&lt;/li&gt;&#xA;&lt;li&gt;Spring Controller에서도 이 객체들을 직접 파라미터로 받아 모든 것을 수동으로 제어할 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Level 2: 기본 매핑과 요청 데이터 추출&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Servlet API를 직접 다루는 불편함을 줄이고, 특정 URL 요청을 특정 메서드에 연결(매핑)하고 요청 데이터를 쉽게 추출하는 단계입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Level 3: 데이터 바인딩 및 응답 데이터 처리&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>spring mvc 주요 어노테이션</title>
      <link>http://localhost:1313/younghan-mvc1/spring-mvc-%EC%A3%BC%EC%9A%94-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98/</link>
      <pubDate>Fri, 27 Jun 2025 19:54:53 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/spring-mvc-%EC%A3%BC%EC%9A%94-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;클래스 단위&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@Controller : 이 클래스가 컨트롤러임을 명시&lt;/li&gt;&#xA;&lt;li&gt;@RequestMapping : 메소드 단위의 RequestMapping 의 공통 url 을 명시&lt;/li&gt;&#xA;&lt;li&gt;@RestContoller : @ResponseBody + @Controller 이 클래스가 반환이 view 가아닌 바디에 직접 컨트롤 즉 Rest 속성을 지닌 컨트롤러임을 명시&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;메소드 단위&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@RequestMapping : 리플렉션을 사용해서 url 등록 각 메서드 마다 GetMapping 등이 있다&lt;/li&gt;&#xA;&lt;li&gt;메소드 인자 단위&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@RequestParam : request parameter 의 값을 가져올 수 있다&lt;/li&gt;&#xA;&lt;li&gt;@ModelAttribute : 모델을 생성하고 parameter 값을 넣어주는 행위를 자동화&lt;/li&gt;&#xA;&lt;li&gt;@RequestHeader : 헤더의 정보를 조회&lt;/li&gt;&#xA;&lt;li&gt;@CookieValue : 쿠키 value 를 조회&lt;/li&gt;&#xA;&lt;li&gt;@ResponseBody : &lt;code&gt;ResponseEntity&amp;lt;?&amp;gt;&lt;/code&gt; 에 자동으로 넣어준다 &lt;code&gt;ResponseEntity&amp;lt;?&amp;gt;&lt;/code&gt;는 HTTP 컨버터를 작동할 수 있는 객체&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;@ModelAttribute 는 생략할 수 있다.&#xA;그런데 @RequestParam 도 생략할 수 있으니 혼란이 발생할 수 있다.&#xA;스프링은 해당 생략시 다음과 같은 규칙을 적용한다.&#xA;String , int , Integer 같은 단순 타입 = @RequestParam&#xA;나머지 = @ModelAttribute (argument resolver 로 지정해둔 타입 외)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring MVC 주요 처리 과정</title>
      <link>http://localhost:1313/younghan-mvc1/spring-mvc-%EC%A3%BC%EC%9A%94-%EC%B2%98%EB%A6%AC-%EA%B3%BC%EC%A0%95/</link>
      <pubDate>Fri, 27 Jun 2025 19:54:41 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/spring-mvc-%EC%A3%BC%EC%9A%94-%EC%B2%98%EB%A6%AC-%EA%B3%BC%EC%A0%95/</guid>
      <description>&lt;h3 id=&#34;메인-흐름&#34;&gt;메인 흐름&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;사용자 요청&lt;/li&gt;&#xA;&lt;li&gt;DispatcherServle doDispatch() 호출&lt;/li&gt;&#xA;&lt;li&gt;등록되어 있는 핸들러(컨트롤러) 조회 : 매핑정보에서 맞는 핸들러를 가져온다&lt;/li&gt;&#xA;&lt;li&gt;핸들러를 처리할 수 있는 어댑터 조회&lt;/li&gt;&#xA;&lt;li&gt;핸들러 어댑터를 통해 핸들러(컨트롤러)를 실행&lt;/li&gt;&#xA;&lt;li&gt;(어뎁터를 통해 무조건) ModelAndView 를 반환받는다&lt;/li&gt;&#xA;&lt;li&gt;ModelAndView를 processDispatchResult함수를 통해 넘겨준다&lt;/li&gt;&#xA;&lt;li&gt;뷰리졸버를 통해 적절한 뷰를 찾아서 뷰를 반환받는다&lt;/li&gt;&#xA;&lt;li&gt;뷰를 통해 렌더링한다&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2번-처리&#34;&gt;2번 처리&lt;/h3&gt;&#xA;&lt;p&gt;(DispatcherServle doDispatch() 이 호출되기 까지 설명)&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;DispatcherServlet 서블릿 등록&#xA;&lt;ol&gt;&#xA;&lt;li&gt;DispatcherServlet 도 부모 클래스에서 HttpServlet 을 상속 받아서 사용하고, 서블릿으로 동작한다.&#xA;DispatcherServlet -&amp;gt; FrameworkServlet -&amp;gt; HttpServletBean -&amp;gt; HttpServlet&lt;/li&gt;&#xA;&lt;li&gt;스프링 부트는 DispatcherServlet 을 서블릿으로 자동으로 등록하면서 모든 경로( urlPatterns=&amp;quot;/&amp;quot; )에 대해서 매핑한다.&#xA;참고: 더 자세한 경로가 우선순위가 높다. 그래서 기존에 등록한 서블릿도 함께 동작한다&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;요청 흐름&#xA;&lt;ol&gt;&#xA;&lt;li&gt;서블릿이 호출되면 HttpServlet 이 제공하는 serivce() 가 호출된다.&lt;/li&gt;&#xA;&lt;li&gt;스프링 MVC는 DispatcherServlet 의 부모인 FrameworkServlet 에서 service() 를 오버라이드 해 두었다.&lt;/li&gt;&#xA;&lt;li&gt;FrameworkServlet.service() 를 시작으로 여러 메서드가 호출되면서 DispatcherServlet.doDispatch() 가 호출된다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;3번-처리&#34;&gt;3번 처리&lt;/h3&gt;&#xA;&lt;p&gt;스프링이 적절한 컨트롤러를 가져오는 과정을 하기 위해서 (파일이든 xml 이든) 미리 가져와서 매핑처리를 하는 친구가 필요하다&#xA;HandlerMapping&lt;/p&gt;</description>
    </item>
    <item>
      <title>obsidian 데이터 바인딩 처리</title>
      <link>http://localhost:1313/younghan-mvc1/obsidian-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%B2%98%EB%A6%AC/</link>
      <pubDate>Mon, 31 Mar 2025 20:09:00 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/obsidian-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9-%EC%B2%98%EB%A6%AC/</guid>
      <description>&lt;p&gt;Spring MVC의 데이터 바인딩과 관련된 주요 처리 과정을 순서대로 정리해드리겠습니다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;요청 수신&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DispatcherServlet이 HTTP 요청을 받음&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;컨트롤러 매핑&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;요청 URL에 매핑된 적절한 컨트롤러 메서드를 찾음&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;파라미터 바인딩 단계&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@ModelAttribute 객체 생성&lt;/li&gt;&#xA;&lt;li&gt;요청 파라미터를 객체의 프로퍼티에 매핑 시도&#xA;&lt;ul&gt;&#xA;&lt;li&gt;타입 변환 시도&lt;/li&gt;&#xA;&lt;li&gt;변환 성공: 해당 필드에 값 설정&lt;/li&gt;&#xA;&lt;li&gt;변환 실패: BindingResult에 에러 정보 저장 (bindingFailure = true)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;검증 단계 (@Valid 또는 @Validated 사용 시)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Validator 실행&lt;/li&gt;&#xA;&lt;li&gt;검증 규칙 위반 시 BindingResult에 에러 정보 저장 (bindingFailure = false)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;컨트롤러 메서드 실행&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;바인딩(및 검증)이 완료된 @ModelAttribute 객체를 메서드 파라미터로 전달&lt;/li&gt;&#xA;&lt;li&gt;BindingResult는 해당 객체의 바로 다음 파라미터로 전달&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;뷰 렌더링&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;BindingResult의 내용을 활용하여 오류 메시지 표시&lt;/li&gt;&#xA;&lt;li&gt;rejectedValue 등을 사용하여 사용자 입력값 유지&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;중요한 점:&lt;/p&gt;</description>
    </item>
    <item>
      <title>thymeleaf 기본</title>
      <link>http://localhost:1313/younghan-mvc1/thymeleaf-%EA%B8%B0%EB%B3%B8/</link>
      <pubDate>Mon, 17 Mar 2025 04:39:00 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/thymeleaf-%EA%B8%B0%EB%B3%B8/</guid>
      <description>&lt;h3 id=&#34;타임리프-간단히-알아보기&#34;&gt;타임리프 간단히 알아보기&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-타임리프-사용-선언&#34;&gt;1. &lt;strong&gt;타임리프 사용 선언&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;타임리프를 사용하기 위해 HTML 문서의 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 태그에 네임스페이스를 선언합니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:th&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.thymeleaf.org&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h4 id=&#34;2-속성-변경--&#34;&gt;2. &lt;strong&gt;속성 변경 - &lt;code&gt;th:href&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;code&gt;th:href&lt;/code&gt;는 HTML의 &lt;code&gt;href&lt;/code&gt; 속성을 동적으로 변경할 수 있습니다.&lt;br&gt;&#xA;예시:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;th:href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@{/css/bootstrap.min.css}&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;동작 방식&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HTML 파일을 직접 열면 &lt;code&gt;href=&amp;quot;value1&amp;quot;&lt;/code&gt;이 사용됩니다.&lt;/li&gt;&#xA;&lt;li&gt;타임리프 템플릿을 거치면 &lt;code&gt;th:href&lt;/code&gt;의 값(&lt;code&gt;@{/css/bootstrap.min.css}&lt;/code&gt;)으로 대체됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;핵심&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;th:xxx&lt;/code&gt;가 붙은 부분은 서버 사이드에서 렌더링되며, 기존 값을 대체합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;th:xxx&lt;/code&gt;가 없으면 기존 HTML 속성이 그대로 유지됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;3-url-링크-표현식--&#34;&gt;3. &lt;strong&gt;URL 링크 표현식 - &lt;code&gt;@{...}&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;타임리프에서 URL 링크를 작성할 때는 &lt;code&gt;@{...}&lt;/code&gt;를 사용합니다. 이를 &lt;strong&gt;URL 링크 표현식&lt;/strong&gt;이라 합니다.&lt;br&gt;&#xA;예시:&lt;/p&gt;</description>
    </item>
    <item>
      <title>spring View 구현체</title>
      <link>http://localhost:1313/02.inbox/spring-view-%EA%B5%AC%ED%98%84%EC%B2%B4/</link>
      <pubDate>Mon, 10 Mar 2025 00:27:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/spring-view-%EA%B5%AC%ED%98%84%EC%B2%B4/</guid>
      <description>&lt;p&gt;스프링 MVC의 **&lt;code&gt;View&lt;/code&gt;**는 &lt;strong&gt;모델 데이터를 클라이언트에게 렌더링하는 최종 형식&lt;/strong&gt;을 결정하는 인터페이스입니다.&lt;br&gt;&#xA;아래에서 언급된 21개의 &lt;code&gt;View&lt;/code&gt; 구현체를 &lt;strong&gt;목적별로 체계적으로 정리&lt;/strong&gt;했습니다:&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-기본-추상-클래스&#34;&gt;1. &lt;strong&gt;기본 추상 클래스&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;11-abstractview&#34;&gt;1.1 &lt;strong&gt;&lt;code&gt;AbstractView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;모든 뷰 구현체의 기본 추상 클래스&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;render()&lt;/code&gt; 메서드를 구현해 모델 데이터를 응답으로 변환합니다.&lt;/li&gt;&#xA;&lt;li&gt;커스텀 뷰를 만들 때 상속받아 사용합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;사용 예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomCsvView&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractView {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;renderMergedOutputModel&lt;/span&gt;(Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; model, HttpServletRequest request, HttpServletResponse response) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// CSV 생성 로직&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-피드feed-뷰&#34;&gt;2. &lt;strong&gt;피드(Feed) 뷰&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;21-abstractatomfeedview&#34;&gt;2.1 &lt;strong&gt;&lt;code&gt;AbstractAtomFeedView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;Atom 형식의 피드&lt;/strong&gt;를 생성합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Atom 1.0 스펙을 준수하는 XML 피드를 생성합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Rome&lt;/code&gt; 라이브러리를 내부적으로 사용합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: 블로그 글 목록을 Atom 피드로 제공.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;22-abstractrssfeedview&#34;&gt;2.2 &lt;strong&gt;&lt;code&gt;AbstractRssFeedView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;RSS 형식의 피드&lt;/strong&gt;를 생성합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RSS 2.0 스펙을 준수하는 XML 피드를 생성합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Rome&lt;/code&gt; 라이브러리를 사용합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: 뉴스 사이트의 RSS 피드.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;23-abstractfeedview&#34;&gt;2.3 &lt;strong&gt;&lt;code&gt;AbstractFeedView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;Atom/RSS 피드의 공통 로직&lt;/strong&gt;을 제공합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;AbstractAtomFeedView&lt;/code&gt;와 &lt;code&gt;AbstractRssFeedView&lt;/code&gt;의 부모 클래스입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-jsonxml-뷰&#34;&gt;3. &lt;strong&gt;JSON/XML 뷰&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;31-mappingjackson2jsonview&#34;&gt;3.1 &lt;strong&gt;&lt;code&gt;MappingJackson2JsonView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;JSON 형식의 응답&lt;/strong&gt;을 생성합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Jackson 2 라이브러리를 사용해 모델 데이터를 JSON으로 변환합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@ResponseBody&lt;/code&gt; 대신 뷰를 통해 JSON을 반환할 때 사용됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; View &lt;span style=&#34;color:#a6e22e&#34;&gt;jsonView&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MappingJackson2JsonView();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;32-mappingjackson2xmlview&#34;&gt;3.2 &lt;strong&gt;&lt;code&gt;MappingJackson2XmlView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;XML 형식의 응답&lt;/strong&gt;을 생성합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Jackson 2의 XML 확장을 사용해 모델 데이터를 XML로 변환합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: 레거시 시스템과의 XML 통신.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;33-marshallingview&#34;&gt;3.3 &lt;strong&gt;&lt;code&gt;MarshallingView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;XML/JSON 변환을 위한 마샬링 뷰&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JAXB, Castor 등 다양한 마샬러를 지원합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Marshaller&lt;/code&gt; 인터페이스를 구현한 라이브러리를 사용합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-pdf-뷰&#34;&gt;4. &lt;strong&gt;PDF 뷰&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;41-abstractpdfview&#34;&gt;4.1 &lt;strong&gt;&lt;code&gt;AbstractPdfView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;PDF 문서&lt;/strong&gt;를 생성합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;iText&lt;/code&gt; 라이브러리를 사용해 PDF를 생성합니다.&lt;/li&gt;&#xA;&lt;li&gt;모델 데이터를 테이블, 텍스트 등으로 렌더링합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InvoicePdfView&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractPdfView {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buildPdfDocument&lt;/span&gt;(Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; model, Document document, PdfWriter writer) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// PDF 문서 생성 로직&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;42-abstractpdfstamperview&#34;&gt;4.2 &lt;strong&gt;&lt;code&gt;AbstractPdfStamperView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;기존 PDF 템플릿에 데이터 채우기&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;iText&lt;/code&gt;의 &lt;code&gt;PdfStamper&lt;/code&gt;를 사용해 정적 PDF 양식을 동적으로 채웁니다.&lt;/li&gt;&#xA;&lt;li&gt;계약서, 청구서 등 고정된 양식에 데이터를 입력할 때 사용됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;5-엑셀-뷰&#34;&gt;5. &lt;strong&gt;엑셀 뷰&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;51-abstractxlsview&#34;&gt;5.1 &lt;strong&gt;&lt;code&gt;AbstractXlsView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;레거시 Excel(.xls) 파일&lt;/strong&gt; 생성.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Apache POI&lt;/code&gt; 라이브러리를 사용해 Excel 97-2003 형식(.xls)을 생성합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: 재무 데이터 보고서.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;52-abstractxlsxview&#34;&gt;5.2 &lt;strong&gt;&lt;code&gt;AbstractXlsxView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;Excel 2007+ 형식(.xlsx) 파일&lt;/strong&gt; 생성.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Apache POI&lt;/code&gt;의 &lt;code&gt;XSSF&lt;/code&gt; API를 사용해 최신 Excel 형식을 지원합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;53-abstractxlsxstreamingview&#34;&gt;5.3 &lt;strong&gt;&lt;code&gt;AbstractXlsxStreamingView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;대용량 Excel 파일 스트리밍&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;메모리 사용을 최소화하기 위해 데이터를 스트리밍 방식으로 작성합니다.&lt;/li&gt;&#xA;&lt;li&gt;수십만 행의 데이터를 처리할 때 유용합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;6-템플릿-뷰&#34;&gt;6. &lt;strong&gt;템플릿 뷰&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;61-freemarkerview&#34;&gt;6.1 &lt;strong&gt;&lt;code&gt;FreeMarkerView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;FreeMarker 템플릿&lt;/strong&gt;을 렌더링합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;FreeMarkerViewResolver&lt;/code&gt;와 함께 사용됩니다.&lt;/li&gt;&#xA;&lt;li&gt;HTML, 텍스트 등 다양한 형식을 지원합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;: 동적 HTML 페이지 생성.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;62-groovymarkupview&#34;&gt;6.2 &lt;strong&gt;&lt;code&gt;GroovyMarkupView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;Groovy 템플릿&lt;/strong&gt;을 렌더링합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Groovy Markup Template을 사용해 뷰를 생성합니다.&lt;/li&gt;&#xA;&lt;li&gt;간결한 문법으로 XML/HTML을 생성합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;63-scripttemplateview&#34;&gt;6.3 &lt;strong&gt;&lt;code&gt;ScriptTemplateView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;스크립트 기반 템플릿&lt;/strong&gt;(예: React, Nashorn)을 지원합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JavaScript 엔진을 사용해 뷰를 렌더링합니다.&lt;/li&gt;&#xA;&lt;li&gt;서버 측에서 React 컴포넌트를 렌더링할 때 사용됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;7-jsp리소스-뷰&#34;&gt;7. &lt;strong&gt;JSP/리소스 뷰&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;71-internalresourceview&#34;&gt;7.1 &lt;strong&gt;&lt;code&gt;InternalResourceView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;JSP 파일&lt;/strong&gt;을 렌더링합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;InternalResourceViewResolver&lt;/code&gt;와 함께 사용됩니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;JstlView&lt;/code&gt;의 부모 클래스입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;72-jstlview&#34;&gt;7.2 &lt;strong&gt;&lt;code&gt;JstlView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;JSTL 태그를 지원하는 JSP 뷰&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JSTL의 &lt;code&gt;&amp;lt;fmt:message&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;c:forEach&amp;gt;&lt;/code&gt; 등을 사용할 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;8-특수-목적-뷰&#34;&gt;8. &lt;strong&gt;특수 목적 뷰&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;81-redirectview&#34;&gt;8.1 &lt;strong&gt;&lt;code&gt;RedirectView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;HTTP 리다이렉트&lt;/strong&gt;를 수행합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;redirect:/newPath&lt;/code&gt; 또는 외부 URL(&lt;code&gt;https://example.com&lt;/code&gt;)로 이동합니다.&lt;/li&gt;&#xA;&lt;li&gt;Post/Redirect/Get 패턴 구현에 사용됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ModelAndView(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RedirectView(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;82-xsltview&#34;&gt;8.2 &lt;strong&gt;&lt;code&gt;XsltView&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;XML 데이터를 XSLT로 변환&lt;/strong&gt;합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;XML 데이터와 XSLT 스타일시트를 결합해 HTML 등을 생성합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-요약&#34;&gt;📌 &lt;strong&gt;요약&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;뷰 클래스&lt;/th&gt;&#xA;          &lt;th&gt;주요 형식&lt;/th&gt;&#xA;          &lt;th&gt;사용 사례&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;MappingJackson2JsonView&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;JSON&lt;/td&gt;&#xA;          &lt;td&gt;REST API 응답&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;AbstractPdfView&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;PDF&lt;/td&gt;&#xA;          &lt;td&gt;계약서, 보고서 생성&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;AbstractXlsxView&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Excel(.xlsx)&lt;/td&gt;&#xA;          &lt;td&gt;데이터 분석 리포트&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;FreeMarkerView&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;HTML&lt;/td&gt;&#xA;          &lt;td&gt;동적 웹 페이지&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;RedirectView&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;HTTP 리다이렉트&lt;/td&gt;&#xA;          &lt;td&gt;Post-Redirect-Get 패턴&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-핵심-포인트&#34;&gt;💡 &lt;strong&gt;핵심 포인트&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;JSON/XML&lt;/strong&gt;은 &lt;strong&gt;&lt;code&gt;MappingJackson2JsonView&lt;/code&gt;&lt;/strong&gt; 로 처리합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;PDF/Excel&lt;/strong&gt;은 &lt;strong&gt;&lt;code&gt;AbstractPdfView&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;AbstractXlsxView&lt;/code&gt;&lt;/strong&gt; 를 확장해 구현합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;리다이렉트&lt;/strong&gt;는 &lt;strong&gt;&lt;code&gt;RedirectView&lt;/code&gt;&lt;/strong&gt; 를 사용합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;템플릿 엔진&lt;/strong&gt;은 각각 전용 뷰 클래스(예: &lt;code&gt;FreeMarkerView&lt;/code&gt;)를 사용합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>spring ViewResolver 구현체</title>
      <link>http://localhost:1313/02.inbox/spring-viewresolver-%EA%B5%AC%ED%98%84%EC%B2%B4/</link>
      <pubDate>Mon, 10 Mar 2025 00:23:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/spring-viewresolver-%EA%B5%AC%ED%98%84%EC%B2%B4/</guid>
      <description>&lt;p&gt;스프링 MVC의 &lt;strong&gt;&lt;code&gt;ViewResolver&lt;/code&gt;&lt;/strong&gt; 는 &lt;strong&gt;뷰 이름을 실제 &lt;code&gt;View&lt;/code&gt; 객체로 변환&lt;/strong&gt;하는 역할을 합니다.&lt;br&gt;&#xA;다양한 구현체가 있으며, 각각의 특징과 사용 사례를 체계적으로 정리했습니다:&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-abstractcachingviewresolver&#34;&gt;1. &lt;strong&gt;&lt;code&gt;AbstractCachingViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;뷰 캐싱 기능을 제공하는 추상 클래스&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;뷰 객체를 캐시하여 &lt;strong&gt;반복적인 뷰 생성을 방지&lt;/strong&gt;합니다.&lt;/li&gt;&#xA;&lt;li&gt;하위 클래스(예: &lt;code&gt;UrlBasedViewResolver&lt;/code&gt;)가 캐싱 로직을 재사용할 수 있도록 합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;사용 예시&lt;/strong&gt;:&lt;br&gt;&#xA;&lt;code&gt;InternalResourceViewResolver&lt;/code&gt;가 이 클래스를 상속받아 JSP 뷰 캐싱을 처리합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-abstracttemplateviewresolver&#34;&gt;2. &lt;strong&gt;&lt;code&gt;AbstractTemplateViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;템플릿 기반 뷰(예: JSP, Thymeleaf)를 처리하는 추상 클래스&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;템플릿 엔진 설정(예: &lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;suffix&lt;/code&gt;)을 공통으로 관리합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;UrlBasedViewResolver&lt;/code&gt;와 함께 사용됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;사용 예시&lt;/strong&gt;:&lt;br&gt;&#xA;&lt;code&gt;FreeMarkerViewResolver&lt;/code&gt;가 이 클래스를 상속받아 FreeMarker 템플릿을 처리합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-beannameviewresolver&#34;&gt;3. &lt;strong&gt;&lt;code&gt;BeanNameViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;스프링 빈 이름으로 뷰를 조회&lt;/strong&gt;합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;뷰 이름이 스프링 빈 이름과 일치하는 &lt;code&gt;View&lt;/code&gt; 객체를 찾아 반환합니다.&lt;/li&gt;&#xA;&lt;li&gt;커스텀 뷰(예: PDF 생성 뷰)를 빈으로 등록해 사용할 때 유용합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; View &lt;span style=&#34;color:#a6e22e&#34;&gt;pdfView&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AbstractPdfView() { &lt;span style=&#34;color:#75715e&#34;&gt;// PDF 뷰 구현&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buildPdfDocument&lt;/span&gt;(Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; model, Document document, PdfWriter writer) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// PDF 생성 로직&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-contentnegotiatingviewresolver&#34;&gt;4. &lt;strong&gt;&lt;code&gt;ContentNegotiatingViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;요청의 &lt;code&gt;Accept&lt;/code&gt; 헤더 또는 쿼리 파라미터에 따라 뷰를 선택&lt;/strong&gt;합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;클라이언트가 원하는 형식(JSON, XML, HTML 등)에 맞는 뷰를 반환합니다.&lt;/li&gt;&#xA;&lt;li&gt;내부적으로 다른 &lt;code&gt;ViewResolver&lt;/code&gt;를 조합해 동작합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WebConfig&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; WebMvcConfigurer {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;configureViewResolvers&lt;/span&gt;(ViewResolverRegistry registry) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        registry.&lt;span style=&#34;color:#a6e22e&#34;&gt;enableContentNegotiation&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; JsonView(), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XmlView());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;5-freemarkerviewresolver&#34;&gt;5. &lt;strong&gt;&lt;code&gt;FreeMarkerViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;FreeMarker 템플릿&lt;/strong&gt;을 처리합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;뷰 이름을 FreeMarker 템플릿 파일 경로(예: &lt;code&gt;views/user.ftl&lt;/code&gt;)로 변환합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;FreeMarkerConfigurer&lt;/code&gt;와 함께 설정됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; FreeMarkerViewResolver &lt;span style=&#34;color:#a6e22e&#34;&gt;freeMarkerViewResolver&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FreeMarkerViewResolver resolver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FreeMarkerViewResolver();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setPrefix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/WEB-INF/views/&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setSuffix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.ftl&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resolver;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;6-groovymarkupviewresolver&#34;&gt;6. &lt;strong&gt;&lt;code&gt;GroovyMarkupViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;Groovy 템플릿&lt;/strong&gt;을 처리합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Groovy Markup Template(예: &lt;code&gt;user.tpl&lt;/code&gt;)을 렌더링합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;GroovyMarkupConfigurer&lt;/code&gt;로 템플릿 설정을 관리합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; GroovyMarkupViewResolver &lt;span style=&#34;color:#a6e22e&#34;&gt;groovyViewResolver&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    GroovyMarkupViewResolver resolver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GroovyMarkupViewResolver();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setPrefix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/views/&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setSuffix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.tpl&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resolver;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;7-internalresourceviewresolver&#34;&gt;7. &lt;strong&gt;&lt;code&gt;InternalResourceViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;JSP 뷰&lt;/strong&gt;를 처리하는 가장 일반적인 리졸버.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;뷰 이름을 JSP 파일 경로(예: &lt;code&gt;/WEB-INF/views/home.jsp&lt;/code&gt;)로 변환합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt;와 &lt;code&gt;suffix&lt;/code&gt;로 경로를 설정합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; InternalResourceViewResolver &lt;span style=&#34;color:#a6e22e&#34;&gt;viewResolver&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    InternalResourceViewResolver resolver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InternalResourceViewResolver();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setPrefix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/WEB-INF/views/&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setSuffix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jsp&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resolver;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;8-resourcebundleviewresolver&#34;&gt;8. &lt;strong&gt;&lt;code&gt;ResourceBundleViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;프로퍼티 파일&lt;/strong&gt;로 뷰를 정의합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;views.properties&lt;/code&gt; 파일에 뷰 이름과 클래스 정보를 저장합니다.&lt;/li&gt;&#xA;&lt;li&gt;다국어 뷰 또는 외부 설정이 필요한 경우에 사용됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# views.properties&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;home.class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;org.springframework.web.servlet.view.JstlView&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;home.url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/WEB-INF/views/home.jsp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;9-scripttemplateviewresolver&#34;&gt;9. &lt;strong&gt;&lt;code&gt;ScriptTemplateViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;스크립트 기반 템플릿&lt;/strong&gt;(예: Nashorn, React)을 처리합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JavaScript 또는 다른 스크립트 엔진으로 뷰를 렌더링합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ScriptTemplateConfigurer&lt;/code&gt;로 스크립트 엔진을 설정합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ScriptTemplateViewResolver &lt;span style=&#34;color:#a6e22e&#34;&gt;scriptViewResolver&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ScriptTemplateViewResolver resolver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ScriptTemplateViewResolver();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setPrefix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;templates/&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setSuffix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jsx&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resolver;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;10-urlbasedviewresolver&#34;&gt;10. &lt;strong&gt;&lt;code&gt;UrlBasedViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;URL 기반 뷰&lt;/strong&gt;를 직접 매핑합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;뷰 이름을 URL 경로로 직접 변환합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;InternalResourceViewResolver&lt;/code&gt;의 부모 클래스입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; UrlBasedViewResolver &lt;span style=&#34;color:#a6e22e&#34;&gt;urlBasedViewResolver&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UrlBasedViewResolver resolver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UrlBasedViewResolver();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setViewClass&lt;/span&gt;(JstlView.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setPrefix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/WEB-INF/views/&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setSuffix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jsp&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resolver;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;11-viewresolvercomposite&#34;&gt;11. &lt;strong&gt;&lt;code&gt;ViewResolverComposite&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;다중 &lt;code&gt;ViewResolver&lt;/code&gt;를 조합&lt;/strong&gt;합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;여러 리졸버를 순차적으로 실행해 적절한 뷰를 찾습니다.&lt;/li&gt;&#xA;&lt;li&gt;우선순위를 설정할 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ViewResolverComposite &lt;span style=&#34;color:#a6e22e&#34;&gt;compositeResolver&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ViewResolverComposite composite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ViewResolverComposite();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    composite.&lt;span style=&#34;color:#a6e22e&#34;&gt;addResolver&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InternalResourceViewResolver());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    composite.&lt;span style=&#34;color:#a6e22e&#34;&gt;addResolver&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FreeMarkerViewResolver());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; composite;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;12-xmlviewresolver&#34;&gt;12. &lt;strong&gt;&lt;code&gt;XmlViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;XML 파일&lt;/strong&gt;로 뷰를 정의합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;views.xml&lt;/code&gt;과 같은 XML 설정 파일에서 뷰 빈을 로드합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ResourceBundleViewResolver&lt;/code&gt;와 유사하지만 XML 형식을 사용합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- views.xml --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;beans&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;home&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.web.servlet.view.JstlView&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/WEB-INF/views/home.jsp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;13-xsltviewresolver&#34;&gt;13. &lt;strong&gt;&lt;code&gt;XsltViewResolver&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;XSLT(XML 변환)&lt;/strong&gt; 뷰를 처리합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;XML 데이터를 XSLT 스타일시트로 변환합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;XsltView&lt;/code&gt; 클래스를 사용해 렌더링합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; XsltViewResolver &lt;span style=&#34;color:#a6e22e&#34;&gt;xsltViewResolver&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    XsltViewResolver resolver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XsltViewResolver();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setPrefix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/WEB-INF/xsl/&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resolver.&lt;span style=&#34;color:#a6e22e&#34;&gt;setSuffix&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.xsl&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resolver;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-요약&#34;&gt;📌 &lt;strong&gt;요약&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;리졸버명&lt;/th&gt;&#xA;          &lt;th&gt;주요 기능&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;InternalResourceViewResolver&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;JSP 뷰 처리 (가장 일반적)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;FreeMarkerViewResolver&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;FreeMarker 템플릿 처리&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ContentNegotiatingViewResolver&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;요청 형식(JSON/XML)에 따라 뷰 선택&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;BeanNameViewResolver&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;스프링 빈 이름으로 뷰 조회&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ViewResolverComposite&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;다중 리졸버 조합&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;XsltViewResolver&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;XML을 XSLT로 변환&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-핵심-포인트&#34;&gt;💡 &lt;strong&gt;핵심 포인트&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;JSP&lt;/strong&gt;는 &lt;strong&gt;&lt;code&gt;InternalResourceViewResolver&lt;/code&gt;&lt;/strong&gt; 로 처리합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;템플릿 엔진&lt;/strong&gt;(FreeMarker, Groovy)은 각각 전용 리졸버를 사용합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;다중 포맷 지원&lt;/strong&gt;(JSON, XML)은 &lt;strong&gt;&lt;code&gt;ContentNegotiatingViewResolver&lt;/code&gt;&lt;/strong&gt; 로 구현합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;커스텀 뷰&lt;/strong&gt;는 &lt;code&gt;BeanNameViewResolver&lt;/code&gt; 또는 &lt;code&gt;ResourceBundleViewResolver&lt;/code&gt;로 관리합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>spring HandlerAdapter 구현체</title>
      <link>http://localhost:1313/02.inbox/spring-handleradapter-%EA%B5%AC%ED%98%84%EC%B2%B4/</link>
      <pubDate>Mon, 10 Mar 2025 00:14:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/spring-handleradapter-%EA%B5%AC%ED%98%84%EC%B2%B4/</guid>
      <description>&lt;p&gt;스프링 MVC의 **&lt;code&gt;HandlerAdapter&lt;/code&gt;**는 다양한 유형의 핸들러(컨트롤러)를 실행하는 인터페이스입니다.&lt;br&gt;&#xA;각 &lt;code&gt;HandlerAdapter&lt;/code&gt; 구현체는 특정 유형의 핸들러를 지원합니다.&lt;br&gt;&#xA;아래에서 언급된 6가지 구현체를 체계적으로 설명합니다:&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-abstracthandlermethodadapter&#34;&gt;1. &lt;strong&gt;&lt;code&gt;AbstractHandlerMethodAdapter&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;메서드 기반 핸들러 어댑터의 추상 클래스&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;HandlerMethod&lt;/code&gt;를 처리하는 어댑터의 기본 기능을 제공합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;RequestMappingHandlerAdapter&lt;/code&gt;의 상위 클래스로, 메서드 단위 처리 로직을 공통화합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;사용 예시&lt;/strong&gt;:&lt;br&gt;&#xA;구체적인 구현체(&lt;code&gt;RequestMappingHandlerAdapter&lt;/code&gt;)에서 확장되어 사용됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-handlerfunctionadapter&#34;&gt;2. &lt;strong&gt;&lt;code&gt;HandlerFunctionAdapter&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;함수형 프로그래밍 스타일 핸들러&lt;/strong&gt;(&lt;code&gt;HandlerFunction&lt;/code&gt;)를 지원합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;RouterFunction&lt;/code&gt;과 함께 사용되며, 람다 표현식으로 핸들러를 정의합니다.&lt;/li&gt;&#xA;&lt;li&gt;Spring 5+에서 도입된 &lt;strong&gt;함수형 엔드포인트&lt;/strong&gt;를 처리합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; RouterFunction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ServerResponse&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; RouterFunctions.&lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/users&amp;#34;&lt;/span&gt;, request &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ServerResponse.&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;(...))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-httprequesthandleradapter&#34;&gt;3. &lt;strong&gt;&lt;code&gt;HttpRequestHandlerAdapter&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;&lt;code&gt;HttpRequestHandler&lt;/code&gt; 인터페이스 구현체&lt;/strong&gt;를 처리합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;서블릿 API(&lt;code&gt;HttpServletRequest&lt;/code&gt;, &lt;code&gt;HttpServletResponse&lt;/code&gt;)를 직접 사용하는 레거시 코드와 호환됩니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt; 애노테이션 없이도 핸들러를 등록할 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LegacyHandler&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; HttpRequestHandler {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleRequest&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 직접 응답을 생성합니다.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-requestmappinghandleradapter&#34;&gt;4. &lt;strong&gt;&lt;code&gt;RequestMappingHandlerAdapter&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;애노테이션 기반 컨트롤러&lt;/strong&gt;(&lt;code&gt;@RequestMapping&lt;/code&gt;, &lt;code&gt;@RestController&lt;/code&gt;)를 처리합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;@GetMapping&lt;/code&gt;, &lt;code&gt;@PostMapping&lt;/code&gt;, &lt;code&gt;@PathVariable&lt;/code&gt;, &lt;code&gt;@RequestBody&lt;/code&gt; 등을 지원합니다.&lt;/li&gt;&#xA;&lt;li&gt;현대적인 스프링 애플리케이션에서 &lt;strong&gt;가장 많이 사용되는 어댑터&lt;/strong&gt;입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RestController&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserController&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/users&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getUsers&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; userService.&lt;span style=&#34;color:#a6e22e&#34;&gt;findAll&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;5-simplecontrollerhandleradapter&#34;&gt;5. &lt;strong&gt;&lt;code&gt;SimpleControllerHandlerAdapter&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;&lt;code&gt;Controller&lt;/code&gt; 인터페이스 구현체&lt;/strong&gt;를 처리합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;과거에 사용되던 방식으로, &lt;code&gt;Controller&lt;/code&gt; 인터페이스의 &lt;code&gt;handleRequest()&lt;/code&gt; 메서드를 호출합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt; 애노테이션 없이 빈으로 등록해야 합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OldController&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Controller {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ModelAndView &lt;span style=&#34;color:#a6e22e&#34;&gt;handleRequest&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ModelAndView(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;viewName&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;6-simpleservlethandleradapter&#34;&gt;6. &lt;strong&gt;&lt;code&gt;SimpleServletHandlerAdapter&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;역할&lt;/strong&gt;: &lt;strong&gt;일반 서블릿&lt;/strong&gt;(&lt;code&gt;javax.servlet.Servlet&lt;/code&gt;)을 핸들러로 사용합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;기존 서블릿을 스프링 MVC에서 재사용할 수 있도록 합니다.&lt;/li&gt;&#xA;&lt;li&gt;서블릿의 &lt;code&gt;service()&lt;/code&gt; 메서드를 직접 호출합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@WebServlet&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/legacy&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LegacyServlet&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; HttpServlet {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doGet&lt;/span&gt;(HttpServletRequest req, HttpServletResponse res) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        res.&lt;span style=&#34;color:#a6e22e&#34;&gt;getWriter&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Legacy Servlet Response&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-요약&#34;&gt;📌 &lt;strong&gt;요약&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;어댑터명&lt;/th&gt;&#xA;          &lt;th&gt;처리 대상&lt;/th&gt;&#xA;          &lt;th&gt;주요 사용 사례&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;HandlerFunctionAdapter&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;HandlerFunction&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;함수형 라우팅(람다 기반)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;HttpRequestHandlerAdapter&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;HttpRequestHandler&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;서블릿 API 기반 레거시 코드&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;RequestMappingHandlerAdapter&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;@RequestMapping&lt;/code&gt; 기반 컨트롤러&lt;/td&gt;&#xA;          &lt;td&gt;현대적인 REST API 개발&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;SimpleControllerHandlerAdapter&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Controller&lt;/code&gt; 인터페이스&lt;/td&gt;&#xA;          &lt;td&gt;과거 버전 호환용 컨트롤러&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;SimpleServletHandlerAdapter&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;일반 서블릿&lt;/td&gt;&#xA;          &lt;td&gt;기존 서블릿 통합&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-핵심-포인트&#34;&gt;💡 &lt;strong&gt;핵심 포인트&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;현대적인 개발&lt;/strong&gt;에서는 &lt;strong&gt;&lt;code&gt;RequestMappingHandlerAdapter&lt;/code&gt;&lt;/strong&gt; 가 주력으로 사용됩니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;함수형 프로그래밍&lt;/strong&gt;은 &lt;strong&gt;&lt;code&gt;HandlerFunctionAdapter&lt;/code&gt;&lt;/strong&gt; 로 처리합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;레거시 코드&lt;/strong&gt; 통합 시 &lt;code&gt;HttpRequestHandlerAdapter&lt;/code&gt; 또는 &lt;code&gt;SimpleServletHandlerAdapter&lt;/code&gt;를 사용합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SimpleControllerHandlerAdapter&lt;/code&gt;는 거의 사용되지 않으며, &lt;code&gt;@Controller&lt;/code&gt; 애노테이션으로 대체되었습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>youngHan mvc1 프로젝트 변화 과정</title>
      <link>http://localhost:1313/younghan-mvc1/younghan-mvc1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B3%80%ED%99%94-%EA%B3%BC%EC%A0%95/</link>
      <pubDate>Tue, 04 Mar 2025 23:58:00 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/younghan-mvc1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B3%80%ED%99%94-%EA%B3%BC%EC%A0%95/</guid>
      <description>&lt;h3 id=&#34;개발-순서&#34;&gt;개발 순서&lt;/h3&gt;&#xA;&lt;p&gt;java.hello.servlet 패키지에서 시작&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;basic 패키지&lt;/strong&gt; :  was 표준으로 되어 있는 서블릿을 등록하는 방법을 배운다&#xA;    WebSservlet 어노테이션 또는 web.xml 파일을 통해 서블릿을 등록할 수 있다&#xA;    실제 구현은 HttpServlet 을 상속받아 실제 사용자의 요청 정보(request) 또는 반환 정보(response)를 통제 변환할 수 있다&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;web.servlet 패키지&lt;/strong&gt; : 적절한 요청에 적절한 반환을 하기 위해 반환정보에(response) 원하는 html 을 쌩으로 담아서 넘겨본다&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;순수 jsp 패키지&lt;/strong&gt; : webapp 폴더안에 jsp 라는 이름으로 존재한다 jsp 를 통해 조금더 편안하게 요청을 처리해 보자 (jsp 에서 처리까지 다 해보기)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;web.servletmvc 패키지&lt;/strong&gt; : 적절한 요청에 jsp 를 통해 view 역할을 분리하여 본다 (jsp 에서 view 의 역할만 맡도록 만든다)&#xA;    (단 jsp 에서 view 에서 적절한 값을 렌더링 하기 위해 필요한 저장소가 있는데 이것이 현재 mvc 의 model 로 쓰이고 있고 이것이 HttpServletRequest 에 setAttribute 데 담아야 jsp 에서 참조하기 편하다)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;web.frontcontroller 패키지&lt;/strong&gt; : 각 버전별로 실제 발전되는 과정을 만들면서 spring 과 비슷하게 만들어 본다&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;v1 패키지&lt;/strong&gt; : 모든 컨트롤 부분이 모두 서블릿으로 등록될 필요없이 frontContoller 만 서블릿으로 등록해서 처리해보자&#xA;프론트 컨트롤러 에서 쉽게 각 컨트롤러를 쉽게 호출하기 위해 다형성을 사용하자&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;v2 패키지&lt;/strong&gt; : 모든 컨트롤 부분에서 jsp 로 forward 하는 부분이 겹친다 이 부분의 경우 따로 다른 클래스에서 처리하기 위해 MyView 클래스를 도입하자&#xA;각 컨트롤러에서 MyView만 반환해서 나머지는 프론트 컨트롤러에서 처리자 ( 여기서 약간 의문일 수 있는데 실제 jsp 말고 다른 view 를 사용할 수 있으므로 view 또 추상화하는 것이 좋다)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;v3 패키지&lt;/strong&gt; : 이 단계에서 많은 것을 해야 한다 모든 컨트롤 부분에서 http 요청 반환 정보(HttpServletRequest, HttpServletResponse) 가 같이 넘어간다 의존성을 제거해보자&#xA;&lt;ol&gt;&#xA;&lt;li&gt;사용자가 요청한 파라미터 정보는 HttpServletRequest.getParameter 를 통해 받는다 HttpServletRequest 없이 컨트롤러에서 처리하려면 프론트컨트롤러에서 처리해서 java 자료형으로 넘겨주어야 한다&lt;/li&gt;&#xA;&lt;li&gt;현재 request 객체를 model 로써 사용하고 있는데 이것을 새롭게 ModelView(MVC 패턴에서 Controller와 View 사이의 데이터 전달 및 뷰 논리적 이름을 관리) 만들자 ( model 의 역할을 함과 동시에 view 의 &lt;strong&gt;논리적 이름 역할&lt;/strong&gt;을 함께 가지고 있으므로 ModelView 로 만들었음 )&lt;/li&gt;&#xA;&lt;li&gt;사용자의 요청(특정 컨트롤러)과 파라미터를 처리해서 ModelView 를 만들어서 처리시키자&lt;/li&gt;&#xA;&lt;li&gt;modelView 에 있는 이름으로는 MyView 를 부르는데 부족하다 전체 경로를 만들어 주는 viewResolver 또한 필요하다&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;v4 패키지&lt;/strong&gt; : 컨트롤러 측에서 ModelView 또한 만들고 싶어하지 않는다 java자료형으로 만들어서 반환시키자&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;v5 패키지&lt;/strong&gt; : 컨트롤러 측에서 누구는 v3 누구는 v4 로 만들고 싶어한다 둘다 지원할 수 있도록 어뎁터를 만들자 어뎁터를 만들면서 컨트롤러는 더 큰 범위를 다룰 수 있으므로 handler 라고 명명한다 프론트 컨트롤러 측에서 적절한 컨트롤러를 받아서 적절한 어뎁터를 통해 진행시킨다&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;web.springmvc 패키지 : spring 을 사용한 편집&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;![Pasted image 202&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20250304235889.png&#34; alt=&#34; (Image resource not found)&#34; &gt;5003267.png)&lt;/p&gt;</description>
    </item>
    <item>
      <title>spring bean scope</title>
      <link>http://localhost:1313/temp/spring-bean-scope/</link>
      <pubDate>Fri, 02 Feb 2024 09:26:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/spring-bean-scope/</guid>
      <description>&lt;p&gt;스프링은 다음과 같은 다양한 스코프를 지원한다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;싱글톤: 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.&lt;/li&gt;&#xA;&lt;li&gt;프로토타입: 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프이다.&lt;/li&gt;&#xA;&lt;li&gt;웹 관련 스코프&#xA;&lt;ul&gt;&#xA;&lt;li&gt;request: 웹 요청이 들어오고 나갈때 까지 유지되는 스코프이다.&lt;/li&gt;&#xA;&lt;li&gt;session: 웹 세션이 생성되고 종료될 때 까지 유지되는 스코프이다.&lt;/li&gt;&#xA;&lt;li&gt;application: 웹의 서블릿 컨텍스트와 같은 범위로 유지되는 스코프이다&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;프로토타입&#34;&gt;프로토타입&lt;/h2&gt;&#xA;&lt;p&gt;초기화 메서드 실행되지만 종료 메서드 호출 안됨 사용자가 직접 해야함&lt;/p&gt;</description>
    </item>
    <item>
      <title>spring life cycle</title>
      <link>http://localhost:1313/temp/spring-life-cycle/</link>
      <pubDate>Thu, 01 Feb 2024 14:18:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/spring-life-cycle/</guid>
      <description>&lt;p&gt;&lt;strong&gt;스프링 빈의 이벤트 라이프사이클&lt;/strong&gt;&#xA;스프링 컨테이너 생성&#xA;-&amp;gt; 스프링 빈 생성&#xA;-&amp;gt; 의존관계 주입&#xA;-&amp;gt; 초기화 콜백&#xA;-&amp;gt; 사용&#xA;-&amp;gt; 소멸전 콜백&#xA;-&amp;gt; 스프링 종료&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;스프링빈 생성시 생성자 의존관계일떄는 같이&#xA;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20240201211107.png&#34; alt=&#34; (Image resource not found)&#34; &gt;&#xA;설정정보(xml, java etc)를 바탕으로 빈을 관리하는 컨테이너를 생성&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;스프링-빈-생성--의존관계-주입&#34;&gt;스프링 빈 생성 &amp;amp; 의존관계 주입&lt;/h2&gt;&#xA;&lt;h3 id=&#34;수동&#34;&gt;수동&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 중복되는 객체생성을 막아준다&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppConfig&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MemberService &lt;span style=&#34;color:#a6e22e&#34;&gt;memberService&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemberServiceImpl(memberRepository());}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; OrderService &lt;span style=&#34;color:#a6e22e&#34;&gt;orderService&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; OrderServiceImpl(memberRepository(), discountPolicy()); &lt;span style=&#34;color:#75715e&#34;&gt;//필드 주입을 한다면 필요 없음}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DiscountPolicy &lt;span style=&#34;color:#a6e22e&#34;&gt;discountPolicy&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RateDiscountPolicy();}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MemberRepository &lt;span style=&#34;color:#a6e22e&#34;&gt;memberRepository&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemoryMemberRepository();}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;@Configration 바이트 조작 기술을 통해 중복되는 객체(memberRepository) 생성을 1개만 생성해 공유해 준다&#xA;@Bean 메서드 수준의 어노테이션을 통해 return 되는 값을 객체로 만들어준다&lt;/p&gt;</description>
    </item>
    <item>
      <title>spring @Autowired 의존관계 주입시 중복 문제</title>
      <link>http://localhost:1313/temp/spring-@autowired-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85%EC%8B%9C-%EC%A4%91%EB%B3%B5-%EB%AC%B8%EC%A0%9C/</link>
      <pubDate>Thu, 01 Feb 2024 08:31:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/spring-@autowired-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85%EC%8B%9C-%EC%A4%91%EB%B3%B5-%EB%AC%B8%EC%A0%9C/</guid>
      <description>&lt;p&gt;Autowired 어노테이션을 통해 어떠한 객체를 생성할 spring에서 의존 관계를 자동으로 주입해 준다&#xA;이때 조회되는 빈이 2개 이상이라면 즉 동일한 부모타입의 객체가 2개가 중복으로 등록되었다면 다음의 3가지 방법으로 해결한다&#xA;조회 대상 빈이 2개 이상일 때 해결 방법&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@Autowired 필드 명 매칭&lt;/li&gt;&#xA;&lt;li&gt;@Qualifier -&amp;gt; @Qualifier끼리 매칭 빈 이름 매칭&lt;/li&gt;&#xA;&lt;li&gt;@Primary 사용&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
