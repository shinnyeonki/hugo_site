<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>System-Programing on My Test Site</title>
    <link>http://localhost:1313/tags/system-programing/</link>
    <description>Recent content in System-Programing on My Test Site</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 19 Oct 2025 23:19:10 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/system-programing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>signal 차이 unix(macos) vs linux</title>
      <link>http://localhost:1313/signal-%EC%B0%A8%EC%9D%B4-unixmacos-vs-linux/</link>
      <pubDate>Sun, 19 Oct 2025 23:19:10 +0900</pubDate>
      <guid>http://localhost:1313/signal-%EC%B0%A8%EC%9D%B4-unixmacos-vs-linux/</guid>
      <description>&lt;h2 id=&#34;macos와-linux의-신호signal-상세-분석&#34;&gt;macOS와 Linux의 신호(Signal) 상세 분석&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;시그널 이름&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;macOS 기본 동작&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;macOS 설명&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Linux 기본 동작&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Linux 설명 (Comment)&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;차이점 / 비고&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGHUP&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;터미널 라인 끊김&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;제어 터미널에서 끊김 감지 또는 제어 프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;설명은 유사하며, 둘 다 프로세스를 종료합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGINT&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로그램 인터럽트&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;키보드로부터의 인터럽트&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;유사하며, 둘 다 프로세스를 종료하며, 주로 Ctrl+C로 발생합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGQUIT&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;코어 이미지 생성&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로그램 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;키보드로부터의 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 코어 덤프를 생성하고 종료합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGILL&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;코어 이미지 생성&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;불법 명령어&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;불법 명령어 (Illegal Instruction)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 코어 덤프를 생성합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGTRAP&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;코어 이미지 생성&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;트레이스 트랩&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;트레이스/브레이크포인트 트랩&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 코어 덤프를 생성합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGABRT&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;코어 이미지 생성&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로그램 중단 (이전 SIGIOT)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;abort(3)로부터의 중단 시그널&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 코어 덤프를 생성합니다. Linux는 &lt;code&gt;abort(3)&lt;/code&gt;로부터 발생한다고 명시합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGEMT&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;코어 이미지 생성&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;명령어 에뮬레이트 실행&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;에뮬레이터 트랩&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;차이점:&lt;/strong&gt; macOS는 코어 이미지를 생성하지만, Linux는 프로세스를 종료합니다. 이는 &amp;ldquo;에뮬레이터 트랩&amp;rdquo; 조건에 대한 다른 처리를 나타낼 수 있습니다. Linux는 이 시그널에 대한 명시적인 코어 덤프 동작이 없습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGFPE&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;코어 이미지 생성&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;부동 소수점 예외&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;부동 소수점 예외&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 코어 덤프를 생성합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGKILL&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로그램 강제 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;강제 종료 시그널&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 종료하며, 포착하거나 무시할 수 없습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGBUS&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;코어 이미지 생성&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;버스 에러&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;버스 에러 (잘못된 메모리 접근)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 코어 덤프를 생성합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGSEGV&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;코어 이미지 생성&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;세그멘테이션 위반&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;유효하지 않은 메모리 참조&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 코어 덤프를 생성합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGSYS&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;코어 이미지 생성&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;존재하지 않는 시스템 콜 호출&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;잘못된 시스템 콜 (SVr4); seccomp(2) 참조&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 코어 덤프를 생성합니다. Linux는 &lt;code&gt;seccomp(2)&lt;/code&gt;에 대한 추가 컨텍스트를 제공합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGPIPE&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;리더 없는 파이프에 쓰기&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;파이프 깨짐: 리더 없는 파이프에 쓰기; pipe(7) 참조&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 종료합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGALRM&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;실시간 타이머 만료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;alarm(2)로부터의 타이머 시그널&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 종료합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGTERM&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;소프트웨어 종료 시그널&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;종료 시그널&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 종료합니다. 이것은 기본 종료 시그널입니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGURG&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;시그널 무시&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;소켓에 긴급 조건 발생&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Ign&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;소켓의 긴급 조건 (4.2BSD)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 시그널을 무시합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGSTOP&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 중지&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;중지 (포착하거나 무시할 수 없음)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Stop&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 중지&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 중지하며 포착하거나 무시할 수 없습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGTSTP&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 중지&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;키보드로부터 발생한 중지 시그널&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Stop&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;터미널에서 입력된 중지&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 중지하며, 주로 Ctrl+Z로 발생합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGCONT&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;시그널 무시&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;중지 후 계속 진행&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Cont&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;중지 후 계속 진행&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 중지된 프로세스를 계속 진행합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGCHLD&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;시그널 무시&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;자식 상태 변경됨&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Ign&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;자식 프로세스 중지 또는 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 기본적으로 시그널을 무시합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGTTIN&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 중지&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;제어 터미널에서 백그라운드 읽기 시도&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Stop&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;백그라운드 프로세스를 위한 터미널 입력&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 중지합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGTTOU&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 중지&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;제어 터미널에 백그라운드 쓰기 시도&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Stop&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;백그라운드 프로세스를 위한 터미널 출력&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 중지합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGIO&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;시그널 무시&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;디스크립터에서 I/O 가능 (fcntl(2) 참조)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;I/O 이제 가능 (4.2BSD)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;차이점:&lt;/strong&gt; macOS는 기본적으로 이 시그널을 무시하는 반면, Linux는 프로세스를 종료합니다. Linux는 또한 &lt;code&gt;SIGPOLL&lt;/code&gt;의 동의어라고 명시합니다. 이는 중요한 행동 차이입니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGXCPU&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;CPU 시간 제한 초과 (setrlimit(2) 참조)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;CPU 시간 제한 초과 (4.2BSD); setrlimit(2) 참조&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;차이점:&lt;/strong&gt; macOS는 프로세스를 종료하는 반면, Linux는 코어 덤프를 생성합니다. 둘 다 &lt;code&gt;setrlimit(2)&lt;/code&gt;를 인정합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGXFSZ&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;파일 크기 제한 초과 (setrlimit(2) 참조)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;파일 크기 제한 초과 (4.2BSD); setrlimit(2) 참조&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;차이점:&lt;/strong&gt; macOS는 프로세스를 종료하는 반면, Linux는 코어 덤프를 생성합니다. 둘 다 &lt;code&gt;setrlimit(2)&lt;/code&gt;를 인정합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGVTALRM&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;가상 시간 알람 (setitimer(2) 참조)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;가상 알람 시계 (4.2BSD)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 종료합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGPROF&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로파일링 타이머 알람 (setitimer(2) 참조)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로파일링 타이머 만료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 종료합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGWINCH&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;시그널 무시&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;윈도우 크기 변경&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Ign&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;윈도우 크기 변경 시그널 (4.3BSD, Sun)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 시그널을 무시합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGINFO&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;시그널 무시&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;키보드로부터의 상태 요청&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;- (&lt;code&gt;SIGPWR&lt;/code&gt;의 동의어)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;SIGPWR&lt;/code&gt;의 동의어 (기본적으로 Term)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;차이점:&lt;/strong&gt; macOS는 &lt;code&gt;SIGINFO&lt;/code&gt;를 상태 요청(예: Ctrl+T)을 위한 별개의 무시 가능한 시그널로 처리합니다. Linux는 &lt;code&gt;SIGINFO&lt;/code&gt;를 &lt;code&gt;SIGPWR&lt;/code&gt;의 동의어로 나열하며, 이는 기본적으로 종료됩니다. 이름과 기본 동작 모두에서 중요한 차이가 있습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGUSR1&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;사용자 정의 시그널 1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;사용자 정의 시그널 1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 종료합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGUSR2&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;프로세스 종료&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;사용자 정의 시그널 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;사용자 정의 시그널 2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;둘 다 프로세스를 종료합니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGCLD&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;(macOS에 없음)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Ign&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;SIGCHLD&lt;/code&gt;의 동의어&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Linux 전용:&lt;/strong&gt; &lt;code&gt;SIGCHLD&lt;/code&gt;의 동의어입니다. macOS에는 &lt;code&gt;SIGCLD&lt;/code&gt;가 별개의 시그널로 나열되지 않습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGIOT&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;(macOS에 없음)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;IOT 트랩. &lt;code&gt;SIGABRT&lt;/code&gt;의 동의어&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Linux 전용:&lt;/strong&gt; &lt;code&gt;SIGABRT&lt;/code&gt;의 동의어로 나열됩니다. macOS는 &lt;code&gt;SIGABRT&lt;/code&gt;가 &amp;ldquo;이전 SIGIOT&amp;quot;였다고 언급하지만, &lt;code&gt;SIGIOT&lt;/code&gt;를 별개의 시그널로 나열하지는 않습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGLOST&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;(macOS에 없음)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;파일 잠금 손실 (사용되지 않음)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Linux 전용:&lt;/strong&gt; 파일 잠금과 관련된 시그널이며 &amp;ldquo;사용되지 않음&amp;quot;으로 나열됩니다. macOS에는 없습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGPOLL&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;(macOS에 없음)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;폴링 가능한 이벤트 (Sys V); &lt;code&gt;SIGIO&lt;/code&gt;의 동의어&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Linux 전용:&lt;/strong&gt; &lt;code&gt;SIGIO&lt;/code&gt;의 동의어입니다. macOS에는 없습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGPWR&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;(macOS에 없음)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;전원 장애 (System V)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Linux 전용:&lt;/strong&gt; 전원 장애 이벤트에 대한 시그널입니다. Linux의 &lt;code&gt;SIGINFO&lt;/code&gt;는 이것의 동의어이며, 이는 macOS의 &lt;code&gt;SIGINFO&lt;/code&gt;와는 큰 차이입니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGSTKFLT&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;(macOS에 없음)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Term&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;보조 프로세서의 스택 오류 (사용되지 않음)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Linux 전용:&lt;/strong&gt; 보조 프로세서의 스택 오류에 대한 시그널이며 &amp;ldquo;사용되지 않음&amp;quot;으로 나열됩니다. macOS에는 없습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SIGUNUSED&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;(macOS에 없음)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Core&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;SIGSYS&lt;/code&gt;와 동의어&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Linux 전용:&lt;/strong&gt; &lt;code&gt;SIGSYS&lt;/code&gt;의 동의어입니다. macOS에는 없습니다.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;주요-차이점-요약&#34;&gt;주요 차이점 요약:&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;특정 시그널의 기본 동작:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>코어 덤프(Core Dump)</title>
      <link>http://localhost:1313/%EC%BD%94%EC%96%B4-%EB%8D%A4%ED%94%84core-dump/</link>
      <pubDate>Sun, 19 Oct 2025 16:12:19 +0900</pubDate>
      <guid>http://localhost:1313/%EC%BD%94%EC%96%B4-%EB%8D%A4%ED%94%84core-dump/</guid>
      <description>&lt;h2 id=&#34;코어-덤프core-dump란-무엇인가---프로세스의-마지막-순간을-담은-사진&#34;&gt;코어 덤프(Core Dump)란 무엇인가? - &amp;ldquo;프로세스의 마지막 순간을 담은 사진&amp;rdquo;&lt;/h2&gt;&#xA;&lt;p&gt;코어 덤프(Core Dump)는 프로그래밍과 시스템 관리에서 매우 중요한 개념입니다. 가장 쉽게 비유하자면, **코어 덤프는 특정 프로그램(프로세스)이 비정상적으로 종료되는 바로 그 순간의 메모리 상태를 그대로 찍어 저장한 &amp;ldquo;스냅샷 파일&amp;rdquo;**입니다. 마치 비행기 사고 시 원인 분석을 위해 블랙박스를 회수하는 것과 같습니다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-코어core-라는-이름의-유래&#34;&gt;1. &amp;ldquo;코어(Core)&amp;rdquo; 라는 이름의 유래&lt;/h3&gt;&#xA;&lt;p&gt;이름이 조금 생소할 수 있습니다. &amp;ldquo;코어&amp;quot;라는 단어는 현대의 CPU 코어를 의미하는 것이 아닙니다. 이는 아주 오래전, 컴퓨터의 주기억장치로 **자기 코어 메모리(Magnetic Core Memory)**를 사용하던 시절에서 유래했습니다. 당시 메모리의 내용을 파일로 &amp;lsquo;쏟아낸다(dump)&amp;lsquo;는 의미에서 &amp;lsquo;코어 덤프&amp;rsquo;라는 용어가 탄생했고, 메모리 기술이 반도체로 바뀐 지금까지도 그 이름이 그대로 사용되고 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>04-FILE 조작</title>
      <link>http://localhost:1313/06.university/system-programminguniversity/04-file-%EC%A1%B0%EC%9E%91/</link>
      <pubDate>Fri, 27 Jun 2025 19:57:04 +0900</pubDate>
      <guid>http://localhost:1313/06.university/system-programminguniversity/04-file-%EC%A1%B0%EC%9E%91/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;1.link() / unlink() / remove() / rename()&lt;/li&gt;&#xA;&lt;li&gt;umask()&lt;/li&gt;&#xA;&lt;li&gt;chmod() / fchmod()&lt;/li&gt;&#xA;&lt;li&gt;truncate() / ftruncate()&lt;/li&gt;&#xA;&lt;li&gt;utime()&lt;/li&gt;&#xA;&lt;li&gt;Directory&lt;/li&gt;&#xA;&lt;li&gt;mkdir() / opendir() / readdir() / closedir() / rewinddir() / rmdir()&lt;/li&gt;&#xA;&lt;li&gt;chdir() / getcwd()&lt;/li&gt;&#xA;&lt;li&gt;Symbolic link&lt;/li&gt;&#xA;&lt;li&gt;sync() / fsync()&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;파일-시스템&#34;&gt;파일 시스템&lt;/h2&gt;&#xA;&lt;p&gt;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20241005225333.png&#34; alt=&#34; (Image resource not found)&#34; &gt;&#xA;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20241005230119.png&#34; alt=&#34;Pasted image 20241005230119 (Image resource not found)&#34; &gt;&#xA;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20241005230383.png&#34; alt=&#34;Pasted image 20241005230383 (Image resource not found)&#34; &gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Boot block&#xA;&lt;ul&gt;&#xA;&lt;li&gt;First block of the file system&lt;/li&gt;&#xA;&lt;li&gt;Program to run system is located&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Super block&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Boot 다음 영역&lt;/li&gt;&#xA;&lt;li&gt;file system 관리 정보&#xA;&lt;ul&gt;&#xA;&lt;li&gt;size of file system&lt;/li&gt;&#xA;&lt;li&gt;info for free block&lt;/li&gt;&#xA;&lt;li&gt;info for i-node&#xA;&lt;ul&gt;&#xA;&lt;li&gt;file type&lt;/li&gt;&#xA;&lt;li&gt;access permission bits&lt;/li&gt;&#xA;&lt;li&gt;file size&lt;/li&gt;&#xA;&lt;li&gt;Time stamp&lt;/li&gt;&#xA;&lt;li&gt;Number of links&lt;/li&gt;&#xA;&lt;li&gt;pointers to data blocks for the file&lt;/li&gt;&#xA;&lt;li&gt;stat 구조체의 field들은 i-node에서 읽어온다&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;block to modify that super block is modified&lt;/li&gt;&#xA;&lt;li&gt;etc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;resides(상주하다) in kernel memory space in DRAM&lt;/li&gt;&#xA;&lt;li&gt;Needed to be consistent with the super block in disk&lt;/li&gt;&#xA;&lt;li&gt;Use &amp;ldquo;sync&amp;rdquo; system call (also a user cmd)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;i-node block list&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Super block 다음의 영역&lt;/li&gt;&#xA;&lt;li&gt;Consists of many i-nodes&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1 i-node / 1 file&lt;/li&gt;&#xA;&lt;li&gt;Identified by the i-node no.&lt;/li&gt;&#xA;&lt;li&gt;File 관리에 필요한 정보 저장&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Data block&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Last area in the file system&lt;/li&gt;&#xA;&lt;li&gt;Contains the data for general files and directory files.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;general files&lt;/li&gt;&#xA;&lt;li&gt;directory files&#xA;&lt;ul&gt;&#xA;&lt;li&gt;file name&lt;/li&gt;&#xA;&lt;li&gt;i-node numbers for files&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;hard-link&#34;&gt;hard link&lt;/h3&gt;&#xA;&lt;p&gt;Link from directory block to i-node&#xA;Use i-node number to make the link (Linux command ‘ln’)&#xA;Hard link는 같은 file system 내부에서만 연결 가능&lt;/p&gt;</description>
    </item>
    <item>
      <title>03-FILE IO</title>
      <link>http://localhost:1313/06.university/system-programminguniversity/03-file-io/</link>
      <pubDate>Tue, 03 Jun 2025 09:59:32 +0900</pubDate>
      <guid>http://localhost:1313/06.university/system-programminguniversity/03-file-io/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;open()&lt;/li&gt;&#xA;&lt;li&gt;creat()&lt;/li&gt;&#xA;&lt;li&gt;close()&lt;/li&gt;&#xA;&lt;li&gt;read()&lt;/li&gt;&#xA;&lt;li&gt;write()&lt;/li&gt;&#xA;&lt;li&gt;lseek()&lt;/li&gt;&#xA;&lt;li&gt;Disk&lt;/li&gt;&#xA;&lt;li&gt;I/O efficiency&lt;/li&gt;&#xA;&lt;li&gt;dup(), dup2()&lt;/li&gt;&#xA;&lt;li&gt;stat(), fstat(), lstat()&lt;/li&gt;&#xA;&lt;li&gt;access()&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;파일 디스크립터&#xA;프로세스가 실행될때 기본적으로 여는 파일은 3개 각각 0(STDIN), 1(STDOUT) ,2(STDERR)&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;man -s 2 open : 과 같이 메뉴얼 파일을 볼 수 있다&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;open&#34;&gt;open&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pathname, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pathname, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags, &lt;span style=&#34;color:#66d9ef&#34;&gt;mode_t&lt;/span&gt; mode);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;int open (const char *pathname, int flags);&#xA;int open (const char *pathname, int flags, mode_t mode);&#xA;파일 디스크립터 값을 반환 -1 은 실패&lt;/p&gt;</description>
    </item>
    <item>
      <title>IPC (massage passing)</title>
      <link>http://localhost:1313/02.inbox/ipc-massage-passing/</link>
      <pubDate>Thu, 01 May 2025 13:03:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/ipc-massage-passing/</guid>
      <description>&lt;p&gt;아래는 &lt;strong&gt;Unix에서 사용되는 다양한 프로세스 간 통신&lt;/strong&gt;(Inter-Process Communication, IPC) 방식들에 대한 &lt;strong&gt;자세한 설명&lt;/strong&gt;입니다.&lt;br&gt;&#xA;주요 내용은 다음과 같은 IPC 기법들을 포함합니다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ordinary Pipe (일반 파이프)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Named Pipe (FIFO)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;UNIX Domain Socket&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-1-ordinary-pipe-일반-파이프&#34;&gt;🔹 1. Ordinary Pipe (일반 파이프)&lt;/h3&gt;&#xA;&lt;h4 id=&#34;-개념&#34;&gt;✅ 개념&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;pipe()&lt;/code&gt; 시스템 콜을 통해 생성됨&lt;/li&gt;&#xA;&lt;li&gt;두 개의 &lt;strong&gt;파일 디스크립터&lt;/strong&gt;(file descriptor) 반환:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;하나는 &lt;strong&gt;쓰기 전용&lt;/strong&gt;(write-end)&lt;/li&gt;&#xA;&lt;li&gt;하나는 &lt;strong&gt;읽기 전용&lt;/strong&gt;(read-end)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;데이터는 쓰기 쪽으로 넣고, 읽기 쪽에서 뺌 → &lt;strong&gt;Producer-Consumer 패턴&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;단방향(unidirectional) 통신만 지원&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-특징&#34;&gt;✅ 특징&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;항목&lt;/th&gt;&#xA;          &lt;th&gt;내용&lt;/th&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;범위&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;부모와 자식 프로세스 간만 가능 (fork 이후 공유)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;존속성&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;프로세스 종료 시 사라짐&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;방향성&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;단방향 (한쪽에서만 보내고 한쪽에서만 받음)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;사용 예시&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;쉘 명령어 연결 (&lt;code&gt;ls | grep &amp;quot;txt&amp;quot;&lt;/code&gt;)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;-예제-코드&#34;&gt;✅ 예제 코드&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pid_t&lt;/span&gt; pid;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(pipefd) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pipe failed&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(EXIT_FAILURE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// Fork 실패&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fork failed&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(EXIT_FAILURE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (pid &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// 자식 프로세스 (reader)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]); &lt;span style=&#34;color:#75715e&#34;&gt;// 쓰기 fd 닫기&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(STDOUT_FILENO, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 부모 프로세스 (writer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]); &lt;span style=&#34;color:#75715e&#34;&gt;// 읽기 fd 닫기&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello from parent&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(pipefd[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;wait&lt;/span&gt;(NULL); &lt;span style=&#34;color:#75715e&#34;&gt;// 자식 기다리기&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;이 코드는 부모가 메시지를 보내고 자식이 그것을 출력하는 간단한 파이프 예제입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>xmap 출력</title>
      <link>http://localhost:1313/02.inbox/xmap-%EC%B6%9C%EB%A0%A5/</link>
      <pubDate>Sun, 22 Dec 2024 12:04:00 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/xmap-%EC%B6%9C%EB%A0%A5/</guid>
      <description>&lt;p&gt;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20241207204591.png&#34; alt=&#34; (Image resource not found)&#34; &gt;%20image%2020241207204591.png)&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;2910149: ./a.out&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;프로세스 ID 2910149의 실행 파일 &lt;code&gt;./a.out&lt;/code&gt;에 대한 메모리 맵입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Address Kbytes RSS Dirty Mode Mapping&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;각 열의 의미:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Address&lt;/strong&gt;: 메모리 주소&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Kbytes&lt;/strong&gt;: 해당 영역의 크기(KB)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;RSS&lt;/strong&gt;: 실제 메모리에 올라간 크기(KB)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Dirty&lt;/strong&gt;: 수정된 페이지 수(KB)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Mode&lt;/strong&gt;: 메모리 접근 권한&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Mapping&lt;/strong&gt;: 매핑된 파일이나 영역의 설명&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;0000561ff3b48000 4 4 4 r---- a.out&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;실행 파일의 읽기 전용 영역입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;0000561ff3b49000 4 4 4 r-x-- a.out&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;실행 권한이 있는 코드 영역입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;0000561ff3b4a000 4 4 4 r---- a.out&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;추가적인 읽기 전용 데이터 영역입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;0000561ff3b4b000 4 4 4 r---- a.out&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;또 다른 읽기 전용 영역입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;0000561ff3b4c000 4 4 4 rw--- a.out&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;쓰기 및 읽기 가능한 데이터 영역입니다(예: 전역 변수).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;0000561ff4380000 132 4 4 rw--- [ anon ]&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;익명 메모리 매핑 영역으로 힙(heap) 영역일 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;00007f79538e0000 4 0 0 ----- [ anon ]&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;보호된 메모리 영역입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;00007f79538e1000 8192 8 8 rw--- [ anon ]&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;스레드 스택 영역으로 8MB의 크기를 갖습니다.&#xA;그 이후 줄들은 각 스레드별 스택 영역을 나타냅니다(스레드마다 약 8MB씩 할당):&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;00007f79547fa000&lt;/code&gt;부터 &lt;code&gt;00007f7956fff000&lt;/code&gt;까지 반복적으로 나타나는 8MB 크기의 &lt;code&gt;rw--- [ anon ]&lt;/code&gt; 영역들은 각 스레드의 스택입니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;마지막 부분:&lt;/p&gt;</description>
    </item>
    <item>
      <title>07-SIGNAL</title>
      <link>http://localhost:1313/06.university/system-programminguniversity/07-signal/</link>
      <pubDate>Tue, 12 Nov 2024 15:11:00 +0900</pubDate>
      <guid>http://localhost:1313/06.university/system-programminguniversity/07-signal/</guid>
      <description></description>
    </item>
    <item>
      <title>05-PROCESS</title>
      <link>http://localhost:1313/06.university/system-programminguniversity/05-process/</link>
      <pubDate>Sun, 27 Oct 2024 18:04:00 +0900</pubDate>
      <guid>http://localhost:1313/06.university/system-programminguniversity/05-process/</guid>
      <description>&lt;p&gt;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20241027180484.png&#34; alt=&#34; (Image resource not found)&#34; &gt;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20241027181337.png&#34; alt=&#34;Pasted image 20241027181337 (Image resource not found)&#34; &gt;&lt;/p&gt;&#xA;&lt;p&gt;qexec() 이후에 오는 문자에 의해 구별되는 표시는 다음의 의미가 있다&#xA;  l -&amp;gt; 인자 정보를 개개의 문자열 데이터를 가르키는 포인터 arg0,    &#xA;       arg1……. argn으로 전달한다&#xA;  v -&amp;gt; 인자 정보를 개개의 문자열 데이터를 가리키는 포인터 배열의&#xA;       선두주소 argv로 전달한다&#xA;  e -&amp;gt; envp 정보를 전달한다&#xA;  p -&amp;gt; p를 사용하는 경우, 실행할 파일이름을 환경 변수 PATH로 지정한 디렉토리 안에서 찾아내어 실행한다&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-execve&#34;&gt;1. &lt;code&gt;execve()&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;축약어&lt;/strong&gt;: &lt;code&gt;exec&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt; (vector) + &lt;code&gt;e&lt;/code&gt; (environment)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;설명&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;ldquo;exec&amp;quot;는 실행을 의미하며, &amp;ldquo;v&amp;quot;는 인수를 배열 형태로 받고, &amp;ldquo;e&amp;quot;는 환경 변수를 배열 형태로 받는다는 것을 나타냅니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-execv&#34;&gt;2. &lt;code&gt;execv()&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;축약어&lt;/strong&gt;: &lt;code&gt;exec&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt; (vector)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;설명&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;ldquo;exec&amp;quot;는 실행을 의미하며, &amp;ldquo;v&amp;quot;는 인수를 배열 형태로 받는다는 것을 나타냅니다. 환경 변수를 설정할 수 없습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-execvp&#34;&gt;3. &lt;code&gt;execvp()&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;축약어&lt;/strong&gt;: &lt;code&gt;exec&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt; (vector) + &lt;code&gt;p&lt;/code&gt; (path)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;설명&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;ldquo;exec&amp;quot;는 실행을 의미하며, &amp;ldquo;v&amp;quot;는 인수를 배열 형태로 받고, &amp;ldquo;p&amp;quot;는 &lt;code&gt;PATH&lt;/code&gt; 환경 변수를 통해 파일을 찾는다는 것을 나타냅니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;4-execle&#34;&gt;4. &lt;code&gt;execle()&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;축약어&lt;/strong&gt;: &lt;code&gt;exec&lt;/code&gt; + &lt;code&gt;l&lt;/code&gt; (list) + &lt;code&gt;e&lt;/code&gt; (environment)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;설명&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;ldquo;exec&amp;quot;는 실행을 의미하며, &amp;ldquo;l&amp;quot;은 인수를 개별적으로 받는다는 것을 나타내고, &amp;ldquo;e&amp;quot;는 환경 변수를 배열 형태로 받는다는 것을 나타냅니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;5-execl&#34;&gt;5. &lt;code&gt;execl()&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;축약어&lt;/strong&gt;: &lt;code&gt;exec&lt;/code&gt; + &lt;code&gt;l&lt;/code&gt; (list)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;설명&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;ldquo;exec&amp;quot;는 실행을 의미하며, &amp;ldquo;l&amp;quot;은 인수를 개별적으로 받는다는 것을 나타냅니다. 환경 변수를 설정할 수 없습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;6-execlp&#34;&gt;6. &lt;code&gt;execlp()&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;축약어&lt;/strong&gt;: &lt;code&gt;exec&lt;/code&gt; + &lt;code&gt;l&lt;/code&gt; (list) + &lt;code&gt;p&lt;/code&gt; (path)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;설명&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;ldquo;exec&amp;quot;는 실행을 의미하며, &amp;ldquo;l&amp;quot;은 인수를 개별적으로 받고, &amp;ldquo;p&amp;quot;는 &lt;code&gt;PATH&lt;/code&gt; 환경 변수를 통해 파일을 찾는다는 것을 나타냅니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;함수 이름&lt;/th&gt;&#xA;          &lt;th&gt;축약어 설명&lt;/th&gt;&#xA;          &lt;th&gt;인수 형태&lt;/th&gt;&#xA;          &lt;th&gt;환경 변수 지원&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;execve&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;exec + v (vector) + e (environment)&lt;/td&gt;&#xA;          &lt;td&gt;파일 이름 + argv[] + envp[]&lt;/td&gt;&#xA;          &lt;td&gt;지원&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;execv&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;exec + v (vector)&lt;/td&gt;&#xA;          &lt;td&gt;파일 경로 + argv[]&lt;/td&gt;&#xA;          &lt;td&gt;지원하지 않음&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;execvp&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;exec + v (vector) + p (path)&lt;/td&gt;&#xA;          &lt;td&gt;파일 이름 + argv[]&lt;/td&gt;&#xA;          &lt;td&gt;지원하지 않음&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;execle&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;exec + l (list) + e (environment)&lt;/td&gt;&#xA;          &lt;td&gt;파일 이름 + arg1, arg2, &amp;hellip; + NULL&lt;/td&gt;&#xA;          &lt;td&gt;지원&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;execl&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;exec + l (list)&lt;/td&gt;&#xA;          &lt;td&gt;파일 경로 + arg1, arg2, &amp;hellip; + NULL&lt;/td&gt;&#xA;          &lt;td&gt;지원하지 않음&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;execlp&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;exec + l (list) + p (path)&lt;/td&gt;&#xA;          &lt;td&gt;파일 이름 + arg1, arg2, &amp;hellip; + NULL&lt;/td&gt;&#xA;          &lt;td&gt;지원하지 않음&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>lab5 과제 추가 설명</title>
      <link>http://localhost:1313/06.university/system-programminguniversity/lab5-%EA%B3%BC%EC%A0%9C-%EC%B6%94%EA%B0%80-%EC%84%A4%EB%AA%85/</link>
      <pubDate>Sun, 06 Oct 2024 03:47:00 +0900</pubDate>
      <guid>http://localhost:1313/06.university/system-programminguniversity/lab5-%EA%B3%BC%EC%A0%9C-%EC%B6%94%EA%B0%80-%EC%84%A4%EB%AA%85/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;파일의 이름을 바꾸는 프로그램을 작성하는데, &#xA;- 파일의 이름을 같은 디렉토리 안에서 바꾸거나 &#xA;- 다른 디렉토리로 이동하여 바꾸는 기능이 모두 구현되어야 합니다. &#xA;- 4-1 강의자료에서 학습한 시스템 호출들을 사용하여 작성하기 바랍니다.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;manual-rename&#34;&gt;manual rename&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;rename()&lt;/code&gt; 함수는 파일의 이름을 변경하며, 필요시 디렉토리 간에 이동할 수 있습니다. 이 함수는 다음과 같은 특성을 가지고 있습니다:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;하드 링크와의 영향&lt;/strong&gt;: 다른 하드 링크(예: &lt;code&gt;link(2)&lt;/code&gt;를 사용하여 생성된 링크)에 대해서는 영향을 미치지 않습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;열린 파일 디스크립터&lt;/strong&gt;: &lt;code&gt;oldpath&lt;/code&gt;에 대한 열린 파일 디스크립터는 영향을 받지 않습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;성공-여부-결정&#34;&gt;성공 여부 결정&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;rename()&lt;/code&gt; 작업이 성공하는지 여부는 여러 가지 제약 조건에 따라 결정됩니다. 아래는 관련된 오류 상황입니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>리눅스 시스템 기본</title>
      <link>http://localhost:1313/%EC%8B%A4%EC%8A%B5%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B5%AC%EC%A1%B0/%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B8%B0%EB%B3%B8/</link>
      <pubDate>Mon, 04 Mar 2024 17:29:00 +0900</pubDate>
      <guid>http://localhost:1313/%EC%8B%A4%EC%8A%B5%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B5%AC%EC%A1%B0/%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B8%B0%EB%B3%B8/</guid>
      <description>&lt;p&gt;운영 체제 레벨의 패키지 관리자로는 아래와 같은 것들이 있습니다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;dnf&lt;/code&gt;: Fedora 리눅스에서 사용되는 패키지 관리자로, yum의 최신 버전입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;pacman&lt;/code&gt;: Arch 리눅스에서 사용되는 패키지 관리자입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;zypper&lt;/code&gt;: openSUSE에서 사용되는 패키지 관리자입니다.&#xA;apt yum brew&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;프로그래밍 언어 레벨의 패키지 관리자로는 아래와 같은 것들이 있습니다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;gem&lt;/code&gt;: Ruby 언어의 패키지 관리자입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;composer&lt;/code&gt;: PHP 언어의 패키지 관리자입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;nuget&lt;/code&gt;: .NET 언어의 패키지 관리자입니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;maven&lt;/code&gt;과 &lt;code&gt;gradle&lt;/code&gt;: Java 언어의 패키지 관리자입니다.&#xA;pip, cargo, npm&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;시스템 콜의 종류&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;﻿﻿프로세스 생성, 삭제&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿메모리 확보, 해제&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿프로세스 간 통신(IPC)&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿네트워크&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿파일시스템 다루기&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿파일 다루기(디바이스 접근)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;strace : 시스템 호출 목록 확인&#xA;os 제공&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
