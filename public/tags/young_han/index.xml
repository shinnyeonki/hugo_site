<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Young_han on My Test Site</title>
    <link>http://localhost:1313/tags/young_han/</link>
    <description>Recent content in Young_han on My Test Site</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 19 Aug 2025 22:14:18 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/young_han/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>서블릿 객체들</title>
      <link>http://localhost:1313/younghan-mvc1/%EC%84%9C%EB%B8%94%EB%A6%BF-%EA%B0%9D%EC%B2%B4%EB%93%A4/</link>
      <pubDate>Tue, 19 Aug 2025 22:14:18 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/%EC%84%9C%EB%B8%94%EB%A6%BF-%EA%B0%9D%EC%B2%B4%EB%93%A4/</guid>
      <description>&lt;h3 id=&#34;1-각-객체의-정의-및-내부-구조&#34;&gt;1. &lt;strong&gt;각 객체의 정의 및 내부 구조&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;11-page-pagecontext-jsp-의존적&#34;&gt;&lt;strong&gt;1.1 page (PageContext)&lt;/strong&gt; jsp 의존적&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;범위&lt;/strong&gt;: 현재 JSP 페이지 내에서만 유효합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;수명&lt;/strong&gt;: 페이지가 렌더링되는 동안에만 유지됩니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;내부 구조&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;PageContext&lt;/code&gt; 클래스에 의해 구현되며, 페이지 단위로 속성을 저장합니다.&lt;/li&gt;&#xA;&lt;li&gt;내부적으로 &lt;strong&gt;&lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt; 를 사용하지만, &lt;code&gt;getAttributeNames()&lt;/code&gt; 메서드를 지원하지 않습니다.&lt;/li&gt;&#xA;&lt;li&gt;JSP의 다른 기본 객체(request, session, application)에 대한 접근을 제공합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;JSP 의존성&lt;/strong&gt;: &lt;strong&gt;O&lt;/strong&gt; (JSP 전용 객체이며, Servlet에서는 사용 불가능합니다.)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;12-request-httpservletrequest&#34;&gt;&lt;strong&gt;1.2 request (HttpServletRequest)&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;범위&lt;/strong&gt;: 같은 요청(request) 내에서 유효합니다 (예: 클라이언트에서 서버로의 한 번의 HTTP 요청).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;수명&lt;/strong&gt;: 요청이 처리되는 동안에만 유지됩니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;내부 구조&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;HttpServletRequest&lt;/code&gt;의 &lt;code&gt;setAttribute()&lt;/code&gt;/&lt;code&gt;getAttribute()&lt;/code&gt; 메서드를 사용합니다.&lt;/li&gt;&#xA;&lt;li&gt;컨테이너(예: Tomcat)는 내부적으로 &lt;strong&gt;&lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt; 구조로 속성을 관리합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;JSP 의존성&lt;/strong&gt;: &lt;strong&gt;X&lt;/strong&gt; (Servlet에서도 사용 가능하며, JSP와 독립적입니다.)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;13-session-httpsession&#34;&gt;&lt;strong&gt;1.3 session (HttpSession)&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;범위&lt;/strong&gt;: 동일한 사용자의 세션(Session) 내에서 유효합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;수명&lt;/strong&gt;: 세션이 종료될 때까지 유지됩니다 (기본적으로 30분).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;내부 구조&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;HttpSession&lt;/code&gt; 객체에 속성을 저장하며, 컨테이너는 &lt;strong&gt;&lt;code&gt;ConcurrentHashMap&amp;lt;String, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt; 를 사용하여 동시성 문제를 해결합니다.&lt;/li&gt;&#xA;&lt;li&gt;세션 ID를 기반으로 사용자를 식별합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;JSP 의존성&lt;/strong&gt;: &lt;strong&gt;X&lt;/strong&gt; (Servlet에서도 사용 가능하며, JSP와 독립적입니다.)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;14-application-servletcontext&#34;&gt;&lt;strong&gt;1.4 application (ServletContext)&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;범위&lt;/strong&gt;: 애플리케이션 전체(모든 사용자 및 세션)에서 유효합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;수명&lt;/strong&gt;: 애플리케이션이 종료될 때까지 유지됩니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;내부 구조&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ServletContext&lt;/code&gt; 객체에 속성을 저장하며, 컨테이너는 &lt;strong&gt;&lt;code&gt;ConcurrentHashMap&amp;lt;String, Object&amp;gt;&lt;/code&gt;&lt;/strong&gt; 를 사용합니다.&lt;/li&gt;&#xA;&lt;li&gt;모든 사용자와 세션에서 공유되는 전역 데이터를 관리합니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;JSP 의존성&lt;/strong&gt;: &lt;strong&gt;X&lt;/strong&gt; (Servlet에서도 사용 가능하며, JSP와 독립적입니다.)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-속성-처리-메서드-비교&#34;&gt;2. &lt;strong&gt;속성 처리 메서드 비교&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;메서드&lt;/th&gt;&#xA;          &lt;th&gt;page (PageContext)&lt;/th&gt;&#xA;          &lt;th&gt;request (HttpServletRequest)&lt;/th&gt;&#xA;          &lt;th&gt;session (HttpSession)&lt;/th&gt;&#xA;          &lt;th&gt;application (ServletContext)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;setAttribute()&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;getAttribute()&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;removeAttribute()&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;getAttributeNames()&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;X&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;          &lt;td&gt;O&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;page 객체&lt;/strong&gt;는 &lt;code&gt;getAttributeNames()&lt;/code&gt;를 지원하지 않습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;request, session, application&lt;/strong&gt;은 &lt;code&gt;getAttributeNames()&lt;/code&gt;로 속성 목록을 조회할 수 있습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-jsp-의존성-분석&#34;&gt;3. &lt;strong&gt;JSP 의존성 분석&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;page 객체&lt;/strong&gt;:&lt;br&gt;&#xA;JSP 전용 객체이며, &lt;code&gt;PageContext&lt;/code&gt; 클래스에 종속적입니다. Servlet에서는 사용할 수 없습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;request, session, application 객체&lt;/strong&gt;:&lt;br&gt;&#xA;Servlet API(&lt;code&gt;HttpServletRequest&lt;/code&gt;, &lt;code&gt;HttpSession&lt;/code&gt;, &lt;code&gt;ServletContext&lt;/code&gt;)에 정의된 표준 객체입니다. 따라서 &lt;strong&gt;JSP와 독립적&lt;/strong&gt;이며, Servlet이나 다른 웹 프레임워크에서 동일하게 사용됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;4-사용-예시&#34;&gt;4. &lt;strong&gt;사용 예시&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-request-범위&#34;&gt;1. &lt;strong&gt;request 범위&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-jsp&#34; data-lang=&#34;jsp&#34;&gt;&amp;lt;!-- JSP 페이지에서 request 속성 설정 --&amp;gt;&#xA;&amp;lt;%&#xA;  request.setAttribute(&amp;#34;userName&amp;#34;, &amp;#34;Alice&amp;#34;);&#xA;%&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Servlet에서 request 속성 사용&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doGet&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  String name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (String) request.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;userName&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-session-범위&#34;&gt;2. &lt;strong&gt;session 범위&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-jsp&#34; data-lang=&#34;jsp&#34;&gt;&amp;lt;!-- JSP에서 세션 속성 설정 --&amp;gt;&#xA;&amp;lt;%&#xA;  session.setAttribute(&amp;#34;userRole&amp;#34;, &amp;#34;ADMIN&amp;#34;);&#xA;%&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;3-application-범위&#34;&gt;3. &lt;strong&gt;application 범위&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-jsp&#34; data-lang=&#34;jsp&#34;&gt;&amp;lt;!-- JSP에서 애플리케이션 속성 설정 --&amp;gt;&#xA;&amp;lt;%&#xA;  application.setAttribute(&amp;#34;appVersion&amp;#34;, &amp;#34;1.0.0&amp;#34;);&#xA;%&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;5-중요-고려-사항&#34;&gt;5. &lt;strong&gt;중요 고려 사항&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;범위 선택&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>spring mvc 주요 어노테이션</title>
      <link>http://localhost:1313/younghan-mvc1/spring-mvc-%EC%A3%BC%EC%9A%94-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98/</link>
      <pubDate>Fri, 27 Jun 2025 19:54:53 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/spring-mvc-%EC%A3%BC%EC%9A%94-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;클래스 단위&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@Controller : 이 클래스가 컨트롤러임을 명시&lt;/li&gt;&#xA;&lt;li&gt;@RequestMapping : 메소드 단위의 RequestMapping 의 공통 url 을 명시&lt;/li&gt;&#xA;&lt;li&gt;@RestContoller : @ResponseBody + @Controller 이 클래스가 반환이 view 가아닌 바디에 직접 컨트롤 즉 Rest 속성을 지닌 컨트롤러임을 명시&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;메소드 단위&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@RequestMapping : 리플렉션을 사용해서 url 등록 각 메서드 마다 GetMapping 등이 있다&lt;/li&gt;&#xA;&lt;li&gt;메소드 인자 단위&#xA;&lt;ul&gt;&#xA;&lt;li&gt;@RequestParam : request parameter 의 값을 가져올 수 있다&lt;/li&gt;&#xA;&lt;li&gt;@ModelAttribute : 모델을 생성하고 parameter 값을 넣어주는 행위를 자동화&lt;/li&gt;&#xA;&lt;li&gt;@RequestHeader : 헤더의 정보를 조회&lt;/li&gt;&#xA;&lt;li&gt;@CookieValue : 쿠키 value 를 조회&lt;/li&gt;&#xA;&lt;li&gt;@ResponseBody : &lt;code&gt;ResponseEntity&amp;lt;?&amp;gt;&lt;/code&gt; 에 자동으로 넣어준다 &lt;code&gt;ResponseEntity&amp;lt;?&amp;gt;&lt;/code&gt;는 HTTP 컨버터를 작동할 수 있는 객체&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;@ModelAttribute 는 생략할 수 있다.&#xA;그런데 @RequestParam 도 생략할 수 있으니 혼란이 발생할 수 있다.&#xA;스프링은 해당 생략시 다음과 같은 규칙을 적용한다.&#xA;String , int , Integer 같은 단순 타입 = @RequestParam&#xA;나머지 = @ModelAttribute (argument resolver 로 지정해둔 타입 외)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring MVC 주요 처리 과정</title>
      <link>http://localhost:1313/younghan-mvc1/spring-mvc-%EC%A3%BC%EC%9A%94-%EC%B2%98%EB%A6%AC-%EA%B3%BC%EC%A0%95/</link>
      <pubDate>Fri, 27 Jun 2025 19:54:41 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/spring-mvc-%EC%A3%BC%EC%9A%94-%EC%B2%98%EB%A6%AC-%EA%B3%BC%EC%A0%95/</guid>
      <description>&lt;h3 id=&#34;메인-흐름&#34;&gt;메인 흐름&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;사용자 요청&lt;/li&gt;&#xA;&lt;li&gt;DispatcherServle doDispatch() 호출&lt;/li&gt;&#xA;&lt;li&gt;등록되어 있는 핸들러(컨트롤러) 조회 : 매핑정보에서 맞는 핸들러를 가져온다&lt;/li&gt;&#xA;&lt;li&gt;핸들러를 처리할 수 있는 어댑터 조회&lt;/li&gt;&#xA;&lt;li&gt;핸들러 어댑터를 통해 핸들러(컨트롤러)를 실행&lt;/li&gt;&#xA;&lt;li&gt;(어뎁터를 통해 무조건) ModelAndView 를 반환받는다&lt;/li&gt;&#xA;&lt;li&gt;ModelAndView를 processDispatchResult함수를 통해 넘겨준다&lt;/li&gt;&#xA;&lt;li&gt;뷰리졸버를 통해 적절한 뷰를 찾아서 뷰를 반환받는다&lt;/li&gt;&#xA;&lt;li&gt;뷰를 통해 렌더링한다&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2번-처리&#34;&gt;2번 처리&lt;/h3&gt;&#xA;&lt;p&gt;(DispatcherServle doDispatch() 이 호출되기 까지 설명)&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;DispatcherServlet 서블릿 등록&#xA;&lt;ol&gt;&#xA;&lt;li&gt;DispatcherServlet 도 부모 클래스에서 HttpServlet 을 상속 받아서 사용하고, 서블릿으로 동작한다.&#xA;DispatcherServlet -&amp;gt; FrameworkServlet -&amp;gt; HttpServletBean -&amp;gt; HttpServlet&lt;/li&gt;&#xA;&lt;li&gt;스프링 부트는 DispatcherServlet 을 서블릿으로 자동으로 등록하면서 모든 경로( urlPatterns=&amp;quot;/&amp;quot; )에 대해서 매핑한다.&#xA;참고: 더 자세한 경로가 우선순위가 높다. 그래서 기존에 등록한 서블릿도 함께 동작한다&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;요청 흐름&#xA;&lt;ol&gt;&#xA;&lt;li&gt;서블릿이 호출되면 HttpServlet 이 제공하는 serivce() 가 호출된다.&lt;/li&gt;&#xA;&lt;li&gt;스프링 MVC는 DispatcherServlet 의 부모인 FrameworkServlet 에서 service() 를 오버라이드 해 두었다.&lt;/li&gt;&#xA;&lt;li&gt;FrameworkServlet.service() 를 시작으로 여러 메서드가 호출되면서 DispatcherServlet.doDispatch() 가 호출된다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;3번-처리&#34;&gt;3번 처리&lt;/h3&gt;&#xA;&lt;p&gt;스프링이 적절한 컨트롤러를 가져오는 과정을 하기 위해서 (파일이든 xml 이든) 미리 가져와서 매핑처리를 하는 친구가 필요하다&#xA;HandlerMapping&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTML form태그 요청 PUT PATH 메서드 확장</title>
      <link>http://localhost:1313/younghan-mvc1/html-form%ED%83%9C%EA%B7%B8-%EC%9A%94%EC%B2%AD-put-path-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%99%95%EC%9E%A5/</link>
      <pubDate>Fri, 27 Jun 2025 19:52:13 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/html-form%ED%83%9C%EA%B7%B8-%EC%9A%94%EC%B2%AD-put-path-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%99%95%EC%9E%A5/</guid>
      <description>&lt;p&gt;HTML 표준  &lt;strong&gt;Form&lt;/strong&gt; 태그에서 기본적으로 지원하는 메서드는 &lt;code&gt;GET&lt;/code&gt;과 &lt;code&gt;POST&lt;/code&gt;뿐이지만, 현대 웹 개발에서는 &lt;strong&gt;PUT&lt;/strong&gt;, &lt;strong&gt;PATCH&lt;/strong&gt;, 또는 &lt;strong&gt;DELETE&lt;/strong&gt; 같은 HTTP 메서드를 사용할 수 있도록 확장할 수 있습니다. 이를 구현하기 위해 몇 가지 방법이 있습니다.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-html-form의-기본-제한&#34;&gt;1. &lt;strong&gt;HTML Form의 기본 제한&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;HTML 표준에서는 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 태그의 &lt;code&gt;method&lt;/code&gt; 속성으로 &lt;strong&gt;GET&lt;/strong&gt; 또는 &lt;strong&gt;POST&lt;/strong&gt;만 지정할 수 있습니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 폼 데이터 --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;즉, 기본적으로 HTML Form 자체로는 &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;를 직접 사용할 수 없습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-putpatch를-사용하는-방법&#34;&gt;2. &lt;strong&gt;PUT/PATCH를 사용하는 방법&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-javascript를-활용한-방식&#34;&gt;&lt;strong&gt;(1) JavaScript를 활용한 방식&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;JavaScript를 사용하면 HTML Form 데이터를 &lt;code&gt;PUT&lt;/code&gt; 또는 &lt;code&gt;PATCH&lt;/code&gt; 요청으로 전송할 수 있습니다. 예를 들어, &lt;code&gt;fetch&lt;/code&gt; API를 사용해 다음과 같이 구현할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>thymeleaf 기본</title>
      <link>http://localhost:1313/younghan-mvc1/thymeleaf-%EA%B8%B0%EB%B3%B8/</link>
      <pubDate>Mon, 17 Mar 2025 04:39:00 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/thymeleaf-%EA%B8%B0%EB%B3%B8/</guid>
      <description>&lt;h3 id=&#34;타임리프-간단히-알아보기&#34;&gt;타임리프 간단히 알아보기&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-타임리프-사용-선언&#34;&gt;1. &lt;strong&gt;타임리프 사용 선언&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;타임리프를 사용하기 위해 HTML 문서의 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 태그에 네임스페이스를 선언합니다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:th&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.thymeleaf.org&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h4 id=&#34;2-속성-변경--&#34;&gt;2. &lt;strong&gt;속성 변경 - &lt;code&gt;th:href&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;code&gt;th:href&lt;/code&gt;는 HTML의 &lt;code&gt;href&lt;/code&gt; 속성을 동적으로 변경할 수 있습니다.&lt;br&gt;&#xA;예시:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;th:href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@{/css/bootstrap.min.css}&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;동작 방식&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HTML 파일을 직접 열면 &lt;code&gt;href=&amp;quot;value1&amp;quot;&lt;/code&gt;이 사용됩니다.&lt;/li&gt;&#xA;&lt;li&gt;타임리프 템플릿을 거치면 &lt;code&gt;th:href&lt;/code&gt;의 값(&lt;code&gt;@{/css/bootstrap.min.css}&lt;/code&gt;)으로 대체됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;핵심&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;th:xxx&lt;/code&gt;가 붙은 부분은 서버 사이드에서 렌더링되며, 기존 값을 대체합니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;th:xxx&lt;/code&gt;가 없으면 기존 HTML 속성이 그대로 유지됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;3-url-링크-표현식--&#34;&gt;3. &lt;strong&gt;URL 링크 표현식 - &lt;code&gt;@{...}&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;타임리프에서 URL 링크를 작성할 때는 &lt;code&gt;@{...}&lt;/code&gt;를 사용합니다. 이를 &lt;strong&gt;URL 링크 표현식&lt;/strong&gt;이라 합니다.&lt;br&gt;&#xA;예시:&lt;/p&gt;</description>
    </item>
    <item>
      <title>youngHan mvc1 프로젝트 변화 과정</title>
      <link>http://localhost:1313/younghan-mvc1/younghan-mvc1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B3%80%ED%99%94-%EA%B3%BC%EC%A0%95/</link>
      <pubDate>Tue, 04 Mar 2025 23:58:00 +0900</pubDate>
      <guid>http://localhost:1313/younghan-mvc1/younghan-mvc1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B3%80%ED%99%94-%EA%B3%BC%EC%A0%95/</guid>
      <description>&lt;h3 id=&#34;개발-순서&#34;&gt;개발 순서&lt;/h3&gt;&#xA;&lt;p&gt;java.hello.servlet 패키지에서 시작&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;basic 패키지&lt;/strong&gt; :  was 표준으로 되어 있는 서블릿을 등록하는 방법을 배운다&#xA;    WebSservlet 어노테이션 또는 web.xml 파일을 통해 서블릿을 등록할 수 있다&#xA;    실제 구현은 HttpServlet 을 상속받아 실제 사용자의 요청 정보(request) 또는 반환 정보(response)를 통제 변환할 수 있다&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;web.servlet 패키지&lt;/strong&gt; : 적절한 요청에 적절한 반환을 하기 위해 반환정보에(response) 원하는 html 을 쌩으로 담아서 넘겨본다&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;순수 jsp 패키지&lt;/strong&gt; : webapp 폴더안에 jsp 라는 이름으로 존재한다 jsp 를 통해 조금더 편안하게 요청을 처리해 보자 (jsp 에서 처리까지 다 해보기)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;web.servletmvc 패키지&lt;/strong&gt; : 적절한 요청에 jsp 를 통해 view 역할을 분리하여 본다 (jsp 에서 view 의 역할만 맡도록 만든다)&#xA;    (단 jsp 에서 view 에서 적절한 값을 렌더링 하기 위해 필요한 저장소가 있는데 이것이 현재 mvc 의 model 로 쓰이고 있고 이것이 HttpServletRequest 에 setAttribute 데 담아야 jsp 에서 참조하기 편하다)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;web.frontcontroller 패키지&lt;/strong&gt; : 각 버전별로 실제 발전되는 과정을 만들면서 spring 과 비슷하게 만들어 본다&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;v1 패키지&lt;/strong&gt; : 모든 컨트롤 부분이 모두 서블릿으로 등록될 필요없이 frontContoller 만 서블릿으로 등록해서 처리해보자&#xA;프론트 컨트롤러 에서 쉽게 각 컨트롤러를 쉽게 호출하기 위해 다형성을 사용하자&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;v2 패키지&lt;/strong&gt; : 모든 컨트롤 부분에서 jsp 로 forward 하는 부분이 겹친다 이 부분의 경우 따로 다른 클래스에서 처리하기 위해 MyView 클래스를 도입하자&#xA;각 컨트롤러에서 MyView만 반환해서 나머지는 프론트 컨트롤러에서 처리자 ( 여기서 약간 의문일 수 있는데 실제 jsp 말고 다른 view 를 사용할 수 있으므로 view 또 추상화하는 것이 좋다)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;v3 패키지&lt;/strong&gt; : 이 단계에서 많은 것을 해야 한다 모든 컨트롤 부분에서 http 요청 반환 정보(HttpServletRequest, HttpServletResponse) 가 같이 넘어간다 의존성을 제거해보자&#xA;&lt;ol&gt;&#xA;&lt;li&gt;사용자가 요청한 파라미터 정보는 HttpServletRequest.getParameter 를 통해 받는다 HttpServletRequest 없이 컨트롤러에서 처리하려면 프론트컨트롤러에서 처리해서 java 자료형으로 넘겨주어야 한다&lt;/li&gt;&#xA;&lt;li&gt;현재 request 객체를 model 로써 사용하고 있는데 이것을 새롭게 ModelView(MVC 패턴에서 Controller와 View 사이의 데이터 전달 및 뷰 논리적 이름을 관리) 만들자 ( model 의 역할을 함과 동시에 view 의 &lt;strong&gt;논리적 이름 역할&lt;/strong&gt;을 함께 가지고 있으므로 ModelView 로 만들었음 )&lt;/li&gt;&#xA;&lt;li&gt;사용자의 요청(특정 컨트롤러)과 파라미터를 처리해서 ModelView 를 만들어서 처리시키자&lt;/li&gt;&#xA;&lt;li&gt;modelView 에 있는 이름으로는 MyView 를 부르는데 부족하다 전체 경로를 만들어 주는 viewResolver 또한 필요하다&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;v4 패키지&lt;/strong&gt; : 컨트롤러 측에서 ModelView 또한 만들고 싶어하지 않는다 java자료형으로 만들어서 반환시키자&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;v5 패키지&lt;/strong&gt; : 컨트롤러 측에서 누구는 v3 누구는 v4 로 만들고 싶어한다 둘다 지원할 수 있도록 어뎁터를 만들자 어뎁터를 만들면서 컨트롤러는 더 큰 범위를 다룰 수 있으므로 handler 라고 명명한다 프론트 컨트롤러 측에서 적절한 컨트롤러를 받아서 적절한 어뎁터를 통해 진행시킨다&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;web.springmvc 패키지 : spring 을 사용한 편집&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;![Pasted image 202&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20250304235889.png&#34; alt=&#34; (Image resource not found)&#34; &gt;5003267.png)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
