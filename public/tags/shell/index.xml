<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on My Test Site</title>
    <link>http://localhost:1313/tags/shell/</link>
    <description>Recent content in Shell on My Test Site</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 11 Aug 2025 00:49:10 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>wsl 에서 폴더가 초록색 배경으로 보이는 이유</title>
      <link>http://localhost:1313/02.inbox/wsl-%EC%97%90%EC%84%9C-%ED%8F%B4%EB%8D%94%EA%B0%80-%EC%B4%88%EB%A1%9D%EC%83%89-%EB%B0%B0%EA%B2%BD%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EC%9D%B4%EB%8A%94-%EC%9D%B4%EC%9C%A0/</link>
      <pubDate>Mon, 11 Aug 2025 00:49:10 +0900</pubDate>
      <guid>http://localhost:1313/02.inbox/wsl-%EC%97%90%EC%84%9C-%ED%8F%B4%EB%8D%94%EA%B0%80-%EC%B4%88%EB%A1%9D%EC%83%89-%EB%B0%B0%EA%B2%BD%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EC%9D%B4%EB%8A%94-%EC%9D%B4%EC%9C%A0/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;전제조건&lt;/li&gt;&#xA;&lt;li&gt;초록색 이유&lt;/li&gt;&#xA;&lt;li&gt;선택 전제 조건&lt;/li&gt;&#xA;&lt;li&gt;윈도우 파일과 유닉스 파일의 파일 시스템 차이&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;전제조건&#34;&gt;전제조건&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;wsl 우분투 배포판을 기준 debian 계열은 거이 비슷&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;wsl 측에서 바라본 윈도우 파일 시스템(ntfs) 를 wsl 환경에서 윈도우측 파일시스템을 &lt;code&gt;/mnt&lt;/code&gt; 폴더 아래에 보조메모리 디바이스 장치 이름  으로 마운트 되어있다&#xA;#ModificationRequired&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shinnk@DESKTOP-KRSG68U:/mnt$ mount&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C:&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;on /mnt/c type 9p &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rw,noatime,dirsync,aname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;drvfs;path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;C:&lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt;uid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1000;gid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1000;symlinkroot&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/mnt/,mmap,access&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;client,msize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;65536,trans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fd,rfd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5,wfd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ls, dir, grep, 등등의 명령은 화면에 적절한 색깔을 입혀서 표시할 필요가 있는데 이때 LS_COLORS 라는 환경변수를 참조해서 적절히 색깔을 입혀서 출력한다&lt;/p&gt;</description>
    </item>
    <item>
      <title>터미널 command line shell</title>
      <link>http://localhost:1313/temp/%ED%84%B0%EB%AF%B8%EB%84%90-command-line-shell/</link>
      <pubDate>Mon, 11 Aug 2025 00:45:47 +0900</pubDate>
      <guid>http://localhost:1313/temp/%ED%84%B0%EB%AF%B8%EB%84%90-command-line-shell/</guid>
      <description>&lt;p&gt;터미널 command line 이라고 한정하여 shell 이라고 말한다면&#xA;일반적으로 /dev 파일 내부에 터미널 드라이브 장치를 통해 사용되는 shell 을 말한다 즉![[../08.media/20231223130204.png|login shell vs non-login shell-20231223130204]]2020231223130204.png)&lt;/p&gt;&#xA;&lt;h2 id=&#34;분류&#34;&gt;분류&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;login vs non-login : shell 이 다른 셸의 하위 프로세스로 실행되는가&lt;/li&gt;&#xA;&lt;li&gt;interactive vs non-interactive : 사용자와 상호작용하는가&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;login-shell-vs-non-login-shell&#34;&gt;login shell vs non-login shell&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[!요약]&#xA;Login Shell : userid passwd 입력해서 들어가는 방법&#xA;Non Longin Shell : 이미 다른 로그인 된 shell 에서 shell 을 fork 형태로 불러내는 방법&lt;/p&gt;</description>
    </item>
    <item>
      <title>find 명확하게 이해하자</title>
      <link>http://localhost:1313/temp/find-%EB%AA%85%ED%99%95%ED%95%98%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EC%9E%90/</link>
      <pubDate>Sat, 02 Mar 2024 14:44:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/find-%EB%AA%85%ED%99%95%ED%95%98%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EC%9E%90/</guid>
      <description>&lt;p&gt;어떤 폴더를 제외하고 파일을 찾고자 -not -path 옵션을 사용했지만 접근 불가능한 파일(proc 내부의 파일들)에 접근하려고 해서 오류(Permission denied)를 뿜어내서 찾아보게 되었다&#xA;하지만 생각보다 조금 내용이 복잡한 것 같아 완벽하게 정리해 보고자 한다&lt;/p&gt;&#xA;&lt;p&gt;find 명령이 하는 일이 단순하게 2가지를 한다고 이해하면&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;찾는 것 ~= 탐색하는 것&lt;/li&gt;&#xA;&lt;li&gt;탐색의 나열중 조건에 맞는 것을 출력하는 것&#xA;2가지 이다&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;find 기본 문법&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;option&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;starting pointing&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;expression&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;option&lt;/li&gt;&#xA;&lt;li&gt;starting pointing : find 명령의 시작 위치&lt;/li&gt;&#xA;&lt;li&gt;expression: 조건 여러가지 종류가 존재&#xA;&lt;ul&gt;&#xA;&lt;li&gt;테스트(Tests) : 파일의 속성에 기반한 true false 값 반환&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ex) -name &amp;lsquo;stdio.h&amp;rsquo; =&amp;gt; 이름이 stdio.h 인 경우 true&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;동작(Actions) : T/F 반환 이외의 std 출력과 같은 부가적이 동작이 있음 그리고 그 부가적인 동작의 성공 여부에 따라 T/F 를 반환&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ex) -path &amp;lsquo;/include&amp;rsquo; -prune =&amp;gt; &amp;lsquo;/include&amp;rsquo; 폴더의 내부는 탐색하지 않는다 또한 전체의 결과는 true 이다&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;전역 옵션(Global options) 전역 옵션은 명령 줄의 어느 부분에서도 지정된 테스트 및 동작의 작동에 영향을 줍니다. 전역 옵션은 항상 true를 반환합니다. 예를 들어 -depth 옵션은 find가 파일 시스템을 깊이 우선 순서로 탐색하도록 만듭니다.&lt;/li&gt;&#xA;&lt;li&gt;위치 옵션(Positional options) 위치 옵션은 그들 뒤에 따라오는 테스트 또는 동작에만 영향을 미칩니다. 위치 옵션은 항상 true를 반환합니다. 예를 들어 -regextype 옵션은 위치 지정이며, 명령 줄에서 나중에 발생하는 정규 표현식에 대해 정규 표현식 방언을 지정합니다.&lt;/li&gt;&#xA;&lt;li&gt;연산자(Operators) 연산자는 표현 내의 다른 항목들을 결합합니다. 예를 들어 -o(논리 OR를 의미함)와 -a(논리 AND를 의미함)가 있습니다. 연산자가 누락된 경우 -a가 가정됩니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;/usr&lt;/code&gt; 폴더에서 &lt;code&gt;/usr/bin&lt;/code&gt; 출력하지도 탐색하지도 않고 이름이 stdio.h 인 파일을 찾는다&#xA;&lt;code&gt;find /usr -not \( -path &#39;/usr/bin&#39; -prune \)  -name &#39;stdio.h&#39;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>sudo vs su</title>
      <link>http://localhost:1313/temp/sudo-vs-su/</link>
      <pubDate>Wed, 28 Feb 2024 09:13:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/sudo-vs-su/</guid>
      <description>&lt;p&gt;sudo, sudoedit — 명령을 다른 사용자로 실행합니다&lt;br&gt;&#xA;su - 대체 사용자 및 그룹 ID를 사용하여 명령을 실행합니다&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3308&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3308&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3308&lt;/span&gt; pts/1    00:00:00     bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3519&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3519&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3308&lt;/span&gt; pts/1    00:00:00       sudo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3520&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3520&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3520&lt;/span&gt; pts/3    00:00:00         sudo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3521&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3521&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3520&lt;/span&gt; pts/3    00:00:00           su&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3522&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3522&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3520&lt;/span&gt; pts/3    00:00:00             bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3388&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3388&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3388&lt;/span&gt; pts/2    00:00:00     bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3539&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3539&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3388&lt;/span&gt; pts/2    00:00:00       sudo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3540&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3540&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3540&lt;/span&gt; pts/4    00:00:00         sudo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3541&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3541&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3540&lt;/span&gt; pts/4    00:00:00           bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>환경변수와 셸변수의 차이</title>
      <link>http://localhost:1313/temp/%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98%EC%99%80-%EC%85%B8%EB%B3%80%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4/</link>
      <pubDate>Mon, 26 Feb 2024 02:58:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98%EC%99%80-%EC%85%B8%EB%B3%80%EC%88%98%EC%9D%98-%EC%B0%A8%EC%9D%B4/</guid>
      <description>&lt;p&gt;이둘의 차이를 알려면 먼저 셀변수라는 것을 알아야 한다&#xA;터미널에 들어가면 보이는 창 이것이 바로 interactive 하게 작용하는 shell 이 실행중이다&lt;/p&gt;</description>
    </item>
    <item>
      <title>interactive shell vs non-interactive shell</title>
      <link>http://localhost:1313/temp/interactive-shell-vs-non-interactive-shell/</link>
      <pubDate>Wed, 21 Feb 2024 17:21:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/interactive-shell-vs-non-interactive-shell/</guid>
      <description>&lt;p&gt;ex) 터미널 vs #!/bin/bash 로 시작하는 파일&lt;/p&gt;&#xA;&lt;p&gt;파일의 셸은 $BASH_ENV 환경변수를 로드한다&lt;/p&gt;</description>
    </item>
    <item>
      <title>shell 의 로그인 과정</title>
      <link>http://localhost:1313/temp/shell-%EC%9D%98-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B3%BC%EC%A0%95/</link>
      <pubDate>Wed, 21 Feb 2024 16:53:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/shell-%EC%9D%98-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B3%BC%EC%A0%95/</guid>
      <description>&lt;p&gt;linux bash 기준으로 설명&lt;/p&gt;&#xA;&lt;p&gt;&#xA;        &lt;img src=&#34;http://localhost:1313/08.media/20231223130204.png&#34; alt=&#34;login shell vs non-login shell-20231223130204 (Image resource not found)&#34; &gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;login-shell-vs-non-login-shell&#34;&gt;Login Shell vs non Login Shell&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Login Shell : ssh, x 윈도우 접속시 userid passwd 입력해서 들어가는 방법&lt;/li&gt;&#xA;&lt;li&gt;Non Longin Shell : 이미 다른 로그인 된 shell 에서 shell 을 fork 형태로 불러내는 방법&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;interactive-shell-vs-non-interactive-shell&#34;&gt;Interactive Shell vs non Interactive Shell&lt;/h2&gt;&#xA;&lt;p&gt;타 프로그래밍 언어와의 큰 차이이다 interactive Shell 은 python 명령어 입력시 나타나는 것과 비슷한 것으로 사용자 입력을 순차적으로 입력 받을 수 있는 방식이다&#xA;이에 반해 non interactive shell 은 &lt;code&gt;python hello.py&lt;/code&gt; 같이 실행한다&lt;/p&gt;</description>
    </item>
    <item>
      <title>bash</title>
      <link>http://localhost:1313/temp/bash/</link>
      <pubDate>Wed, 21 Feb 2024 16:50:00 +0900</pubDate>
      <guid>http://localhost:1313/temp/bash/</guid>
      <description>&lt;h2 id=&#34;-vs-source--&#34;&gt;./ vs source == .&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ss64.com/bash/source.html&#34; class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; &gt;도트 및 소스 연산자 공식문서&lt;/a&gt;&#xA;source 와 . 은 완벽하게 동일&#xA;test.sh 파일&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ps -ejH &lt;span style=&#34;color:#75715e&#34;&gt;# 플로세스를 tree 형태로 보여주는 명령&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;실행별 차이&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;User@HostName:~/test$ . test.sh &lt;span style=&#34;color:#75715e&#34;&gt;# . or source &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PID    PGID     SID TTY          TIME CMD&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3996&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3996&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3996&lt;/span&gt; ?        00:00:00     SessionLeader&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3998&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3996&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3996&lt;/span&gt; ?        00:00:00       Relay&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4003&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4003&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;4003&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;4003&lt;/span&gt; pts/6    00:00:00         bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;39032&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;39032&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;4003&lt;/span&gt; pts/6    00:00:00           ps &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;User@HostName:~/test$ ./test.sh &lt;span style=&#34;color:#75715e&#34;&gt;# ./&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PID    PGID     SID TTY          TIME CMD&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3996&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3996&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3996&lt;/span&gt; ?        00:00:00     SessionLeader&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3998&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3996&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3996&lt;/span&gt; ?        00:00:00       Relay&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4003&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4003&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;4003&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;4003&lt;/span&gt; pts/6    00:00:00         bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;39255&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;39255&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;4003&lt;/span&gt; pts/6    00:00:00           test.sh &lt;span style=&#34;color:#75715e&#34;&gt;# !!!!!!!!!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;39256&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;39255&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;4003&lt;/span&gt; pts/6    00:00:00             ps&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;./test.sh의 경우 다른 명령(gcc)와 마찬가지로 명령을 셸에서 해석하여 시스템에게 전달하며 새로운 프로세스&lt;u&gt; fork() 형태로 하위 프로세스로 생성한다?&lt;/u&gt; #ModificationRequired&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
